; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\zip.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02BOGAIONP@ab?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05DOIEBMOI@1?41?44?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT @allocate_new_datablock@0
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @free_datablock@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @init_linkedlist@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @add_data_in_datablock@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ziplocal_putValue@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ziplocal_putValue_inmemory@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @ziplocal_TmzDateToDosDate@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @zipOpen@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @zipOpenNewFileInZip@40
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @zipWriteInFileInZip@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @zipCloseFileInZip@4
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @zipClose@8
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_zip_copyright
CONST	SEGMENT
_zip_copyright DB ' zip 0.15 Copyright 1998 Gilles Vollant ', 00H
CONST	ENDS
EXTRN	_malloc:NEAR
; Function compile flags: /Ogty
; File c:\documents and settings\weinerschnitzel\my documents\xbox\surreal64ce sf\trunk\b5.6\1964x11\xbox\zlib\zip.c
;	COMDAT @allocate_new_datablock@0
_TEXT	SEGMENT
@allocate_new_datablock@0 PROC NEAR			; COMDAT

; 132  :     linkedlist_datablock_internal* ldi;
; 133  :     ldi = (linkedlist_datablock_internal*)
; 134  :                  ALLOC(sizeof(linkedlist_datablock_internal));

  00000	68 00 10 00 00	 push	 4096			; 00001000H
  00005	e8 00 00 00 00	 call	 _malloc
  0000a	83 c4 04	 add	 esp, 4

; 135  :     if (ldi!=NULL)

  0000d	85 c0		 test	 eax, eax
  0000f	74 14		 je	 SHORT $L2094

; 136  :     {
; 137  :         ldi->next_datablock = NULL ;

  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 138  :         ldi->filled_in_this_block = 0 ;

  00017	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 139  :         ldi->avail_in_this_block = SIZEDATA_INDATABLOCK ;

  0001e	c7 40 04 f0 0f
	00 00		 mov	 DWORD PTR [eax+4], 4080	; 00000ff0H
$L2094:

; 140  :     }
; 141  :     return ldi;
; 142  : }

  00025	c3		 ret	 0
@allocate_new_datablock@0 ENDP
_TEXT	ENDS
EXTRN	_free:NEAR
; Function compile flags: /Ogty
;	COMDAT @free_datablock@4
_TEXT	SEGMENT
@free_datablock@4 PROC NEAR				; COMDAT
; _ldi$ = eax

; 147  :     while (ldi!=NULL)

  00000	85 c0		 test	 eax, eax
  00002	74 13		 je	 SHORT $L2103
  00004	56		 push	 esi
$L2102:

; 148  :     {
; 149  :         linkedlist_datablock_internal* ldinext = ldi->next_datablock;

  00005	8b 30		 mov	 esi, DWORD PTR [eax]

; 150  :         TRYFREE(ldi);

  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 _free
  0000d	83 c4 04	 add	 esp, 4
  00010	85 f6		 test	 esi, esi

; 151  :         ldi = ldinext;

  00012	8b c6		 mov	 eax, esi
  00014	75 ef		 jne	 SHORT $L2102
  00016	5e		 pop	 esi
$L2103:

; 152  :     }
; 153  : }

  00017	c3		 ret	 0
@free_datablock@4 ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT @init_linkedlist@4
_TEXT	SEGMENT
@init_linkedlist@4 PROC NEAR				; COMDAT
; _ll$ = eax

; 158  :     ll->first_block = ll->last_block = NULL;

  00000	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00007	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 159  : }

  0000d	c3		 ret	 0
@init_linkedlist@4 ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT @add_data_in_datablock@12
_TEXT	SEGMENT
_ll$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
@add_data_in_datablock@12 PROC NEAR			; COMDAT

; 173  : {

  00000	55		 push	 ebp

; 174  :     linkedlist_datablock_internal* ldi;
; 175  :     const unsigned char* from_copy;
; 176  : 
; 177  :     if (ll==NULL)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR _ll$[esp]
  00005	85 ed		 test	 ebp, ebp

; 178  :         return ZIP_INTERNALERROR;

  00007	74 36		 je	 SHORT $L2508

; 179  : 
; 180  :     if (ll->last_block == NULL)

  00009	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  0000c	85 c0		 test	 eax, eax
  0000e	75 38		 jne	 SHORT $L2503

; 181  :     {
; 182  :         ll->first_block = ll->last_block = allocate_new_datablock();

  00010	68 00 10 00 00	 push	 4096			; 00001000H
  00015	e8 00 00 00 00	 call	 _malloc
  0001a	83 c4 04	 add	 esp, 4
  0001d	85 c0		 test	 eax, eax
  0001f	74 14		 je	 SHORT $L2502
  00021	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00027	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0002e	c7 40 04 f0 0f
	00 00		 mov	 DWORD PTR [eax+4], 4080	; 00000ff0H
$L2502:

; 183  :         if (ll->first_block == NULL)

  00035	85 c0		 test	 eax, eax
  00037	89 45 04	 mov	 DWORD PTR [ebp+4], eax
  0003a	89 45 00	 mov	 DWORD PTR [ebp], eax
  0003d	75 09		 jne	 SHORT $L2503
$L2508:

; 184  :             return ZIP_INTERNALERROR;

  0003f	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  00044	5d		 pop	 ebp

; 221  : }

  00045	c2 0c 00	 ret	 12			; 0000000cH
$L2503:
  00048	53		 push	 ebx

; 185  :     }
; 186  : 
; 187  :     ldi = ll->last_block;
; 188  :     from_copy = (unsigned char*)buf;

  00049	8b 5c 24 10	 mov	 ebx, DWORD PTR _buf$[esp+4]
  0004d	56		 push	 esi
  0004e	8b 75 04	 mov	 esi, DWORD PTR [ebp+4]
  00051	57		 push	 edi

; 189  : 
; 190  :     while (len>0)

  00052	8b 7c 24 1c	 mov	 edi, DWORD PTR _len$[esp+12]
  00056	85 ff		 test	 edi, edi
  00058	0f 86 7e 00 00
	00		 jbe	 $L2133
  0005e	8b ff		 npad	 2
$L2132:

; 191  :     {
; 192  :         uInt copy_this;
; 193  :         uInt i;
; 194  :         unsigned char* to_copy;
; 195  : 
; 196  :         if (ldi->avail_in_this_block==0)

  00060	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00063	85 c0		 test	 eax, eax
  00065	75 30		 jne	 SHORT $L2137

; 197  :         {
; 198  :             ldi->next_datablock = allocate_new_datablock();

  00067	68 00 10 00 00	 push	 4096			; 00001000H
  0006c	e8 00 00 00 00	 call	 _malloc
  00071	83 c4 04	 add	 esp, 4
  00074	85 c0		 test	 eax, eax
  00076	74 14		 je	 SHORT $L2495
  00078	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0007e	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00085	c7 40 04 f0 0f
	00 00		 mov	 DWORD PTR [eax+4], 4080	; 00000ff0H
$L2495:

; 199  :             if (ldi->next_datablock == NULL)

  0008c	85 c0		 test	 eax, eax
  0008e	89 06		 mov	 DWORD PTR [esi], eax
  00090	74 53		 je	 SHORT $L2499

; 201  :             ldi = ldi->next_datablock ;

  00092	8b f0		 mov	 esi, eax

; 202  :             ll->last_block = ldi;

  00094	89 45 04	 mov	 DWORD PTR [ebp+4], eax
$L2137:

; 203  :         }
; 204  : 
; 205  :         if (ldi->avail_in_this_block < len)

  00097	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009a	3b c7		 cmp	 eax, edi

; 206  :             copy_this = (uInt)ldi->avail_in_this_block;
; 207  :         else

  0009c	72 02		 jb	 SHORT $L2142

; 208  :             copy_this = (uInt)len;

  0009e	8b c7		 mov	 eax, edi
$L2142:

; 209  : 
; 210  :         to_copy = &(ldi->data[ldi->filled_in_this_block]);
; 211  : 
; 212  :         for (i=0;i<copy_this;i++)

  000a0	85 c0		 test	 eax, eax
  000a2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000a5	8d 4c 31 10	 lea	 ecx, DWORD PTR [ecx+esi+16]
  000a9	76 17		 jbe	 SHORT $L2146
  000ab	8b fb		 mov	 edi, ebx
  000ad	2b f9		 sub	 edi, ecx
  000af	8b e8		 mov	 ebp, eax
$L2144:

; 213  :             *(to_copy+i)=*(from_copy+i);

  000b1	8a 14 0f	 mov	 dl, BYTE PTR [edi+ecx]
  000b4	88 11		 mov	 BYTE PTR [ecx], dl
  000b6	41		 inc	 ecx
  000b7	4d		 dec	 ebp
  000b8	75 f7		 jne	 SHORT $L2144
  000ba	8b 7c 24 1c	 mov	 edi, DWORD PTR _len$[esp+12]
  000be	8b 6c 24 14	 mov	 ebp, DWORD PTR _ll$[esp+12]
$L2146:

; 214  : 
; 215  :         ldi->filled_in_this_block += copy_this;

  000c2	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 216  :         ldi->avail_in_this_block -= copy_this;

  000c5	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000c8	03 d0		 add	 edx, eax
  000ca	2b c8		 sub	 ecx, eax

; 217  :         from_copy += copy_this ;

  000cc	03 d8		 add	 ebx, eax

; 218  :         len -= copy_this;

  000ce	2b f8		 sub	 edi, eax
  000d0	89 56 08	 mov	 DWORD PTR [esi+8], edx
  000d3	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  000d6	89 7c 24 1c	 mov	 DWORD PTR _len$[esp+12], edi
  000da	75 84		 jne	 SHORT $L2132
$L2133:
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx

; 219  :     }
; 220  :     return ZIP_OK;

  000df	33 c0		 xor	 eax, eax
  000e1	5d		 pop	 ebp

; 221  : }

  000e2	c2 0c 00	 ret	 12			; 0000000cH
$L2499:
  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	5b		 pop	 ebx

; 200  :                 return ZIP_INTERNALERROR;

  000e8	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  000ed	5d		 pop	 ebp

; 221  : }

  000ee	c2 0c 00	 ret	 12			; 0000000cH
@add_data_in_datablock@12 ENDP
_TEXT	ENDS
EXTRN	_fwrite:NEAR
; Function compile flags: /Ogty
;	COMDAT @ziplocal_putValue@12
_TEXT	SEGMENT
_buf$ = -4						; size = 4
_file$ = 8						; size = 4
@ziplocal_putValue@12 PROC NEAR				; COMDAT
; _x$ = edx
; _nbByte$ = ecx

; 252  : {

  00000	51		 push	 ecx

; 253  :     unsigned char buf[4];
; 254  :     int n;
; 255  :     for (n = 0; n < nbByte; n++) {

  00001	33 c0		 xor	 eax, eax
  00003	85 c9		 test	 ecx, ecx
  00005	7e 0b		 jle	 SHORT $L2176
$L2174:

; 256  :         buf[n] = (unsigned char)(x & 0xff);

  00007	88 14 04	 mov	 BYTE PTR _buf$[esp+eax+4], dl

; 257  :         x >>= 8;

  0000a	c1 ea 08	 shr	 edx, 8
  0000d	40		 inc	 eax
  0000e	3b c1		 cmp	 eax, ecx
  00010	7c f5		 jl	 SHORT $L2174
$L2176:

; 258  :     }
; 259  :     if (fwrite(buf,nbByte,1,file)!=1)

  00012	8b 44 24 08	 mov	 eax, DWORD PTR _file$[esp]
  00016	50		 push	 eax
  00017	6a 01		 push	 1
  00019	51		 push	 ecx
  0001a	8d 4c 24 0c	 lea	 ecx, DWORD PTR _buf$[esp+16]
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 _fwrite
  00024	48		 dec	 eax
  00025	f7 d8		 neg	 eax
  00027	1b c0		 sbb	 eax, eax

; 260  :         return ZIP_ERRNO;
; 261  :     else
; 262  :         return ZIP_OK;
; 263  : }

  00029	83 c4 14	 add	 esp, 20			; 00000014H
  0002c	c2 04 00	 ret	 4
@ziplocal_putValue@12 ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT @ziplocal_putValue_inmemory@12
_TEXT	SEGMENT
@ziplocal_putValue_inmemory@12 PROC NEAR		; COMDAT
; _dest$ = esi
; _x$ = ecx
; _nbByte$ = edx

; 271  :     unsigned char* buf=(unsigned char*)dest;
; 272  :     int n;
; 273  :     for (n = 0; n < nbByte; n++) {

  00000	33 c0		 xor	 eax, eax
  00002	85 d2		 test	 edx, edx
  00004	7e 0b		 jle	 SHORT $L2197
$L2195:

; 274  :         buf[n] = (unsigned char)(x & 0xff);

  00006	88 0c 30	 mov	 BYTE PTR [eax+esi], cl

; 275  :         x >>= 8;

  00009	c1 e9 08	 shr	 ecx, 8
  0000c	40		 inc	 eax
  0000d	3b c2		 cmp	 eax, edx
  0000f	7c f5		 jl	 SHORT $L2195
$L2197:

; 276  :     }
; 277  : }

  00011	c3		 ret	 0
@ziplocal_putValue_inmemory@12 ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT @ziplocal_TmzDateToDosDate@8
_TEXT	SEGMENT
@ziplocal_TmzDateToDosDate@8 PROC NEAR			; COMDAT
; _ptm$ = edx

; 285  :     uLong year = (uLong)ptm->tm_year;

  00000	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]

; 286  :     if (year>1980)

  00003	81 f9 bc 07 00
	00		 cmp	 ecx, 1980		; 000007bcH
  00009	76 08		 jbe	 SHORT $L2206

; 287  :         year-=1980;

  0000b	81 e9 bc 07 00
	00		 sub	 ecx, 1980		; 000007bcH

; 288  :     else if (year>80)

  00011	eb 08		 jmp	 SHORT $L2208
$L2206:
  00013	83 f9 50	 cmp	 ecx, 80			; 00000050H
  00016	76 03		 jbe	 SHORT $L2208

; 289  :         year-=80;

  00018	83 e9 50	 sub	 ecx, 80			; 00000050H
$L2208:

; 290  :     return
; 291  :       (uLong) (((ptm->tm_mday) + (32 * (ptm->tm_mon+1)) + (512 * year)) << 16) |
; 292  :         ((ptm->tm_sec/2) + (32* ptm->tm_min) + (2048 * (uLong)ptm->tm_hour));

  0001b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001e	56		 push	 esi
  0001f	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00022	c1 e0 06	 shl	 eax, 6
  00025	03 c6		 add	 eax, esi
  00027	8b 32		 mov	 esi, DWORD PTR [edx]
  00029	d1 ee		 shr	 esi, 1
  0002b	c1 e0 05	 shl	 eax, 5
  0002e	03 c6		 add	 eax, esi
  00030	8b 72 10	 mov	 esi, DWORD PTR [edx+16]
  00033	c1 e1 04	 shl	 ecx, 4
  00036	8d 4c 31 01	 lea	 ecx, DWORD PTR [ecx+esi+1]
  0003a	8b 72 0c	 mov	 esi, DWORD PTR [edx+12]
  0003d	c1 e1 05	 shl	 ecx, 5
  00040	03 ce		 add	 ecx, esi
  00042	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00045	0b c1		 or	 eax, ecx
  00047	5e		 pop	 esi

; 293  : }

  00048	c3		 ret	 0
@ziplocal_TmzDateToDosDate@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
PUBLIC	??_C@_02BOGAIONP@ab?$AA@			; `string'
PUBLIC	@zipOpen@8
EXTRN	__chkstk:NEAR
EXTRN	_fclose:NEAR
EXTRN	_fopen:NEAR
EXTRN	_ftell:NEAR
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BOGAIONP@ab?$AA@
CONST	SEGMENT
??_C@_02BOGAIONP@ab?$AA@ DB 'ab', 00H			; `string'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT @zipOpen@8
_TEXT	SEGMENT
_ziinit$ = -16500					; size = 16500
@zipOpen@8 PROC NEAR					; COMDAT
; _pathname$ = ecx
; _append$ = edx

; 301  : {

  00000	b8 74 40 00 00	 mov	 eax, 16500		; 00004074H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 302  :     zip_internal ziinit;
; 303  :     zip_internal* zi;
; 304  : 
; 305  :     ziinit.filezip = fopen(pathname,(append == 0) ? "wb" : "ab");

  0000c	33 ff		 xor	 edi, edi
  0000e	3b d7		 cmp	 edx, edi
  00010	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
  00015	74 05		 je	 SHORT $L2522
  00017	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??_C@_02BOGAIONP@ab?$AA@
$L2522:
  0001c	50		 push	 eax
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _fopen
  00023	8b f0		 mov	 esi, eax
  00025	83 c4 08	 add	 esp, 8

; 306  :     if (ziinit.filezip == NULL)

  00028	3b f7		 cmp	 esi, edi
  0002a	89 74 24 08	 mov	 DWORD PTR _ziinit$[esp+16508], esi

; 307  :         return NULL;

  0002e	74 3e		 je	 SHORT $L2527

; 308  :     ziinit.begin_pos = ftell(ziinit.filezip);

  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 _ftell

; 309  :     ziinit.in_opened_file_inzip = 0;
; 310  :     ziinit.ci.stream_initialised = 0;
; 311  :     ziinit.number_entry = 0;
; 312  :     init_linkedlist(&(ziinit.central_dir));
; 313  : 
; 314  : 
; 315  :     zi = (zip_internal*)ALLOC(sizeof(zip_internal));

  00036	68 74 40 00 00	 push	 16500			; 00004074H
  0003b	89 84 24 7c 40
	00 00		 mov	 DWORD PTR _ziinit$[esp+33008], eax
  00042	89 7c 24 1c	 mov	 DWORD PTR _ziinit$[esp+16528], edi
  00046	89 7c 24 58	 mov	 DWORD PTR _ziinit$[esp+16588], edi
  0004a	89 bc 24 80 40
	00 00		 mov	 DWORD PTR _ziinit$[esp+33012], edi
  00051	89 7c 24 18	 mov	 DWORD PTR _ziinit$[esp+16524], edi
  00055	89 7c 24 14	 mov	 DWORD PTR _ziinit$[esp+16520], edi
  00059	e8 00 00 00 00	 call	 _malloc
  0005e	83 c4 08	 add	 esp, 8

; 316  :     if (zi==NULL)

  00061	3b c7		 cmp	 eax, edi
  00063	75 14		 jne	 SHORT $L2225

; 317  :     {
; 318  :         fclose(ziinit.filezip);

  00065	56		 push	 esi
  00066	e8 00 00 00 00	 call	 _fclose
  0006b	83 c4 04	 add	 esp, 4
$L2527:
  0006e	5f		 pop	 edi

; 319  :         return NULL;

  0006f	33 c0		 xor	 eax, eax
  00071	5e		 pop	 esi

; 323  :     return (zipFile)zi;
; 324  : }

  00072	81 c4 74 40 00
	00		 add	 esp, 16500		; 00004074H
  00078	c3		 ret	 0
$L2225:

; 320  :     }
; 321  : 
; 322  :     *zi = ziinit;

  00079	b9 1d 10 00 00	 mov	 ecx, 4125		; 0000101dH
  0007e	8d 74 24 08	 lea	 esi, DWORD PTR _ziinit$[esp+16508]
  00082	8b f8		 mov	 edi, eax
  00084	f3 a5		 rep movsd
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi

; 323  :     return (zipFile)zi;
; 324  : }

  00088	81 c4 74 40 00
	00		 add	 esp, 16500		; 00004074H
  0008e	c3		 ret	 0
@zipOpen@8 ENDP
_TEXT	ENDS
PUBLIC	@zipWriteInFileInZip@12
EXTRN	@deflate@8:NEAR
EXTRN	@crc32@12:NEAR
; Function compile flags: /Ogty
;	COMDAT @zipWriteInFileInZip@12
_TEXT	SEGMENT
_len$ = 8						; size = 4
@zipWriteInFileInZip@12 PROC NEAR			; COMDAT
; _file$ = ecx
; _buf$ = edx

; 503  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 504  :     zip_internal* zi;
; 505  :     int err=ZIP_OK;

  00004	33 db		 xor	 ebx, ebx

; 506  : 
; 507  :     if (file == NULL)

  00006	85 f6		 test	 esi, esi

; 508  :         return ZIP_PARAMERROR;

  00008	74 07		 je	 SHORT $L2533

; 509  :     zi = (zip_internal*)file;
; 510  : 
; 511  :     if (zi->in_opened_file_inzip == 0)

  0000a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0000d	85 c0		 test	 eax, eax
  0000f	75 0a		 jne	 SHORT $L2349
$L2533:
  00011	5e		 pop	 esi

; 512  :         return ZIP_PARAMERROR;

  00012	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00017	5b		 pop	 ebx

; 560  : }

  00018	c2 04 00	 ret	 4
$L2349:

; 513  : 
; 514  :     zi->ci.stream.next_in = buf;
; 515  :     zi->ci.stream.avail_in = len;

  0001b	8b 44 24 0c	 mov	 eax, DWORD PTR _len$[esp+4]

; 516  :     zi->ci.crc32 = crc32(zi->ci.crc32,buf,len);

  0001f	8b 8e 68 40 00
	00		 mov	 ecx, DWORD PTR [esi+16488]
  00025	55		 push	 ebp
  00026	57		 push	 edi
  00027	8d 6e 10	 lea	 ebp, DWORD PTR [esi+16]
  0002a	50		 push	 eax
  0002b	89 55 00	 mov	 DWORD PTR [ebp], edx
  0002e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00031	e8 00 00 00 00	 call	 @crc32@12
  00036	89 86 68 40 00
	00		 mov	 DWORD PTR [esi+16488], eax
  0003c	8d 64 24 00	 npad	 4
$L2351:

; 517  : 
; 518  :     while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  00040	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00043	85 c0		 test	 eax, eax
  00045	0f 86 bb 00 00
	00		 jbe	 $L2352

; 519  :     {
; 520  :         if (zi->ci.stream.avail_out == 0)

  0004b	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0004e	85 c0		 test	 eax, eax
  00050	75 2e		 jne	 SHORT $L2353

; 521  :         {
; 522  :             if (fwrite(zi->ci.buffered_data,(uInt)zi->ci.pos_in_buffered_data,1,zi->filezip)
; 523  :                                                                            !=1)

  00052	8b 06		 mov	 eax, DWORD PTR [esi]
  00054	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00057	50		 push	 eax
  00058	6a 01		 push	 1
  0005a	51		 push	 ecx
  0005b	8d 7e 64	 lea	 edi, DWORD PTR [esi+100]
  0005e	57		 push	 edi
  0005f	e8 00 00 00 00	 call	 _fwrite
  00064	83 c4 10	 add	 esp, 16			; 00000010H
  00067	83 f8 01	 cmp	 eax, 1
  0006a	74 03		 je	 SHORT $L2355

; 524  :                 err = ZIP_ERRNO;

  0006c	83 cb ff	 or	 ebx, -1
$L2355:

; 525  :             zi->ci.pos_in_buffered_data = 0;

  0006f	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0

; 526  :             zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  00076	c7 46 20 00 40
	00 00		 mov	 DWORD PTR [esi+32], 16384 ; 00004000H

; 527  :             zi->ci.stream.next_out = zi->ci.buffered_data;

  0007d	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
$L2353:

; 528  :         }
; 529  : 
; 530  :         if (zi->ci.method == Z_DEFLATED)

  00080	83 7e 60 08	 cmp	 DWORD PTR [esi+96], 8
  00084	75 1d		 jne	 SHORT $L2357

; 531  :         {
; 532  :             uLong uTotalOutBefore = zi->ci.stream.total_out;

  00086	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]

; 533  :             err=deflate(&zi->ci.stream,  Z_NO_FLUSH);

  00089	33 d2		 xor	 edx, edx
  0008b	8b cd		 mov	 ecx, ebp
  0008d	e8 00 00 00 00	 call	 @deflate@8

; 534  :             zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  00092	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00095	8b d8		 mov	 ebx, eax
  00097	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0009a	2b d7		 sub	 edx, edi
  0009c	03 c2		 add	 eax, edx
  0009e	89 46 4c	 mov	 DWORD PTR [esi+76], eax

; 535  : 
; 536  :         }
; 537  :         else

  000a1	eb 5b		 jmp	 SHORT $L2360
$L2357:

; 538  :         {
; 539  :             uInt copy_this,i;
; 540  :             if (zi->ci.stream.avail_in < zi->ci.stream.avail_out)

  000a3	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000a6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000a9	3b c8		 cmp	 ecx, eax
  000ab	73 02		 jae	 SHORT $L2364

; 541  :                 copy_this = zi->ci.stream.avail_in;

  000ad	8b c1		 mov	 eax, ecx
$L2364:

; 542  :             else
; 543  :                 copy_this = zi->ci.stream.avail_out;
; 544  :             for (i=0;i<copy_this;i++)

  000af	33 c9		 xor	 ecx, ecx
  000b1	85 c0		 test	 eax, eax
  000b3	76 11		 jbe	 SHORT $L2367
$L2365:

; 545  :                 *(((char*)zi->ci.stream.next_out)+i) =
; 546  :                     *(((const char*)zi->ci.stream.next_in)+i);

  000b5	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  000b8	8a 14 11	 mov	 dl, BYTE PTR [ecx+edx]
  000bb	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  000be	88 14 39	 mov	 BYTE PTR [ecx+edi], dl
  000c1	41		 inc	 ecx
  000c2	3b c8		 cmp	 ecx, eax
  000c4	72 ef		 jb	 SHORT $L2365
$L2367:

; 547  :             {
; 548  :                 zi->ci.stream.avail_in -= copy_this;

  000c6	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 549  :                 zi->ci.stream.avail_out-= copy_this;

  000c9	8b 7e 20	 mov	 edi, DWORD PTR [esi+32]

; 550  :                 zi->ci.stream.next_in+= copy_this;

  000cc	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  000cf	2b c8		 sub	 ecx, eax
  000d1	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 551  :                 zi->ci.stream.next_out+= copy_this;

  000d4	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000d7	2b f8		 sub	 edi, eax
  000d9	03 d0		 add	 edx, eax
  000db	03 c8		 add	 ecx, eax
  000dd	89 7e 20	 mov	 DWORD PTR [esi+32], edi

; 552  :                 zi->ci.stream.total_in+= copy_this;

  000e0	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  000e3	89 55 00	 mov	 DWORD PTR [ebp], edx

; 553  :                 zi->ci.stream.total_out+= copy_this;

  000e6	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  000e9	89 4e 1c	 mov	 DWORD PTR [esi+28], ecx

; 554  :                 zi->ci.pos_in_buffered_data += copy_this;

  000ec	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  000ef	03 f8		 add	 edi, eax
  000f1	03 d0		 add	 edx, eax
  000f3	03 c8		 add	 ecx, eax
  000f5	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  000f8	89 56 24	 mov	 DWORD PTR [esi+36], edx
  000fb	89 4e 4c	 mov	 DWORD PTR [esi+76], ecx
$L2360:

; 517  : 
; 518  :     while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  000fe	85 db		 test	 ebx, ebx
  00100	0f 84 3a ff ff
	ff		 je	 $L2351
$L2352:
  00106	5f		 pop	 edi
  00107	5d		 pop	 ebp
  00108	5e		 pop	 esi

; 555  :             }
; 556  :         }
; 557  :     }
; 558  : 
; 559  :     return 0;

  00109	33 c0		 xor	 eax, eax
  0010b	5b		 pop	 ebx

; 560  : }

  0010c	c2 04 00	 ret	 4
@zipWriteInFileInZip@12 ENDP
_TEXT	ENDS
PUBLIC	@zipCloseFileInZip@4
EXTRN	@deflateEnd@4:NEAR
EXTRN	_fseek:NEAR
; Function compile flags: /Ogty
;	COMDAT @zipCloseFileInZip@4
_TEXT	SEGMENT
_buf$2594 = -4						; size = 4
_buf$2581 = -4						; size = 4
_buf$2568 = -4						; size = 4
@zipCloseFileInZip@4 PROC NEAR				; COMDAT
; _file$ = ecx

; 564  : {

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f1		 mov	 esi, ecx

; 565  :     zip_internal* zi;
; 566  :     int err=ZIP_OK;

  00005	33 ff		 xor	 edi, edi

; 567  : 
; 568  :     if (file == NULL)

  00007	3b f7		 cmp	 esi, edi

; 569  :         return ZIP_PARAMERROR;

  00009	74 05		 je	 SHORT $L2647

; 570  :     zi = (zip_internal*)file;
; 571  : 
; 572  :     if (zi->in_opened_file_inzip == 0)    

  0000b	39 7e 0c	 cmp	 DWORD PTR [esi+12], edi
  0000e	75 09		 jne	 SHORT $L2378
$L2647:
  00010	5f		 pop	 edi

; 573  :         return ZIP_PARAMERROR;

  00011	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00016	5e		 pop	 esi

; 644  : }

  00017	59		 pop	 ecx
  00018	c3		 ret	 0
$L2378:

; 574  :     zi->ci.stream.avail_in = 0;
; 575  :     
; 576  :     if (zi->ci.method == Z_DEFLATED)

  00019	83 7e 60 08	 cmp	 DWORD PTR [esi+96], 8
  0001d	53		 push	 ebx
  0001e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00021	75 5b		 jne	 SHORT $L2643
  00023	55		 push	 ebp
  00024	8d 6e 10	 lea	 ebp, DWORD PTR [esi+16]
$L2381:

; 577  :         while (err==ZIP_OK)
; 578  :     {
; 579  :         uLong uTotalOutBefore;
; 580  :         if (zi->ci.stream.avail_out == 0)

  00027	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0002a	85 c0		 test	 eax, eax
  0002c	75 26		 jne	 SHORT $L2384

; 581  :         {
; 582  :             if (fwrite(zi->ci.buffered_data,(uInt)zi->ci.pos_in_buffered_data,1,zi->filezip)
; 583  :                                                                            !=1)

  0002e	8b 06		 mov	 eax, DWORD PTR [esi]
  00030	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00033	50		 push	 eax
  00034	6a 01		 push	 1
  00036	51		 push	 ecx
  00037	8d 7e 64	 lea	 edi, DWORD PTR [esi+100]
  0003a	57		 push	 edi
  0003b	e8 00 00 00 00	 call	 _fwrite
  00040	83 c4 10	 add	 esp, 16			; 00000010H

; 584  :                 err = ZIP_ERRNO;
; 585  :             zi->ci.pos_in_buffered_data = 0;

  00043	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0

; 586  :             zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  0004a	c7 46 20 00 40
	00 00		 mov	 DWORD PTR [esi+32], 16384 ; 00004000H

; 587  :             zi->ci.stream.next_out = zi->ci.buffered_data;

  00051	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
$L2384:

; 588  :         }
; 589  :         uTotalOutBefore = zi->ci.stream.total_out;

  00054	8b 5e 24	 mov	 ebx, DWORD PTR [esi+36]

; 590  :         err=deflate(&zi->ci.stream,  Z_FINISH);

  00057	ba 04 00 00 00	 mov	 edx, 4
  0005c	8b cd		 mov	 ecx, ebp
  0005e	e8 00 00 00 00	 call	 @deflate@8

; 591  :         zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  00063	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00066	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00069	2b d3		 sub	 edx, ebx
  0006b	8b f8		 mov	 edi, eax
  0006d	03 ca		 add	 ecx, edx
  0006f	85 ff		 test	 edi, edi
  00071	89 4e 4c	 mov	 DWORD PTR [esi+76], ecx
  00074	74 b1		 je	 SHORT $L2381

; 592  :     }
; 593  : 
; 594  :     if (err==Z_STREAM_END)

  00076	83 ff 01	 cmp	 edi, 1
  00079	5d		 pop	 ebp
  0007a	75 02		 jne	 SHORT $L2643

; 595  :         err=ZIP_OK; /* this is normal */

  0007c	33 ff		 xor	 edi, edi
$L2643:

; 596  : 
; 597  :     if ((zi->ci.pos_in_buffered_data>0) && (err==ZIP_OK))

  0007e	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00081	85 c0		 test	 eax, eax
  00083	76 1e		 jbe	 SHORT $L2646
  00085	85 ff		 test	 edi, edi
  00087	75 1a		 jne	 SHORT $L2646

; 598  :         if (fwrite(zi->ci.buffered_data,(uInt)zi->ci.pos_in_buffered_data,1,zi->filezip)
; 599  :                                                                        !=1)

  00089	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008b	51		 push	 ecx
  0008c	6a 01		 push	 1
  0008e	50		 push	 eax
  0008f	8d 56 64	 lea	 edx, DWORD PTR [esi+100]
  00092	52		 push	 edx
  00093	e8 00 00 00 00	 call	 _fwrite
  00098	83 c4 10	 add	 esp, 16			; 00000010H
  0009b	83 f8 01	 cmp	 eax, 1
  0009e	74 03		 je	 SHORT $L2646

; 600  :             err = ZIP_ERRNO;

  000a0	83 cf ff	 or	 edi, -1
$L2646:

; 601  : 
; 602  :     if ((zi->ci.method == Z_DEFLATED) && (err==ZIP_OK))

  000a3	83 7e 60 08	 cmp	 DWORD PTR [esi+96], 8
  000a7	75 15		 jne	 SHORT $L2393
  000a9	85 ff		 test	 edi, edi
  000ab	75 11		 jne	 SHORT $L2393

; 603  :     {
; 604  :         err=deflateEnd(&zi->ci.stream);

  000ad	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  000b0	e8 00 00 00 00	 call	 @deflateEnd@4
  000b5	8b f8		 mov	 edi, eax

; 605  :         zi->ci.stream_initialised = 0;

  000b7	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
$L2393:

; 606  :     }
; 607  : 
; 608  :     ziplocal_putValue_inmemory(zi->ci.central_header+16,(uLong)zi->ci.crc32,4); /*crc*/

  000be	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  000c1	8b 86 68 40 00
	00		 mov	 eax, DWORD PTR [esi+16488]
  000c7	88 41 10	 mov	 BYTE PTR [ecx+16], al
  000ca	83 c1 10	 add	 ecx, 16			; 00000010H
  000cd	c1 e8 08	 shr	 eax, 8
  000d0	88 41 01	 mov	 BYTE PTR [ecx+1], al
  000d3	c1 e8 08	 shr	 eax, 8
  000d6	88 41 02	 mov	 BYTE PTR [ecx+2], al
  000d9	c1 e8 08	 shr	 eax, 8
  000dc	88 41 03	 mov	 BYTE PTR [ecx+3], al

; 609  :     ziplocal_putValue_inmemory(zi->ci.central_header+20,
; 610  :                                 (uLong)zi->ci.stream.total_out,4); /*compr size*/

  000df	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  000e2	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  000e5	88 41 14	 mov	 BYTE PTR [ecx+20], al
  000e8	83 c1 14	 add	 ecx, 20			; 00000014H
  000eb	c1 e8 08	 shr	 eax, 8
  000ee	88 41 01	 mov	 BYTE PTR [ecx+1], al
  000f1	c1 e8 08	 shr	 eax, 8
  000f4	88 41 02	 mov	 BYTE PTR [ecx+2], al
  000f7	c1 e8 08	 shr	 eax, 8
  000fa	88 41 03	 mov	 BYTE PTR [ecx+3], al

; 611  :     ziplocal_putValue_inmemory(zi->ci.central_header+24,
; 612  :                                 (uLong)zi->ci.stream.total_in,4); /*uncompr size*/

  000fd	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00100	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00103	83 c1 18	 add	 ecx, 24			; 00000018H
  00106	88 01		 mov	 BYTE PTR [ecx], al
  00108	c1 e8 08	 shr	 eax, 8
  0010b	88 41 01	 mov	 BYTE PTR [ecx+1], al
  0010e	c1 e8 08	 shr	 eax, 8
  00111	88 41 02	 mov	 BYTE PTR [ecx+2], al
  00114	c1 e8 08	 shr	 eax, 8

; 613  : 
; 614  :     if (err==ZIP_OK)

  00117	85 ff		 test	 edi, edi
  00119	88 41 03	 mov	 BYTE PTR [ecx+3], al
  0011c	75 13		 jne	 SHORT $L2397

; 615  :         err = add_data_in_datablock(&zi->central_dir,zi->ci.central_header,
; 616  :                                        (uLong)zi->ci.size_centralheader);

  0011e	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00121	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00124	50		 push	 eax
  00125	51		 push	 ecx
  00126	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00129	52		 push	 edx
  0012a	e8 00 00 00 00	 call	 @add_data_in_datablock@12
  0012f	8b f8		 mov	 edi, eax
$L2397:

; 617  :     free(zi->ci.central_header);

  00131	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 _free
  0013a	83 c4 04	 add	 esp, 4

; 618  : 
; 619  :     if (err==ZIP_OK)

  0013d	85 ff		 test	 edi, edi
  0013f	0f 85 ec 00 00
	00		 jne	 $L2645

; 620  :     {
; 621  :         long cur_pos_inzip = ftell(zi->filezip);

  00145	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00147	51		 push	 ecx
  00148	e8 00 00 00 00	 call	 _ftell

; 622  : 	    if (fseek(zi->filezip,
; 623  :                   zi->ci.pos_local_header + 14,SEEK_SET)!=0)

  0014d	8b 56 50	 mov	 edx, DWORD PTR [esi+80]
  00150	57		 push	 edi
  00151	83 c2 0e	 add	 edx, 14			; 0000000eH
  00154	8b d8		 mov	 ebx, eax
  00156	8b 06		 mov	 eax, DWORD PTR [esi]
  00158	52		 push	 edx
  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 _fseek
  0015f	83 c4 10	 add	 esp, 16			; 00000010H
  00162	85 c0		 test	 eax, eax
  00164	74 08		 je	 SHORT $L2638

; 624  : 		    err = ZIP_ERRNO;

  00166	83 cf ff	 or	 edi, -1

; 625  : 
; 626  :         if (err==ZIP_OK)

  00169	e9 ae 00 00 00	 jmp	 $L2599
$L2638:

; 627  :             err = ziplocal_putValue(zi->filezip,(uLong)zi->ci.crc32,4); /* crc 32, unknown */

  0016e	8b 86 68 40 00
	00		 mov	 eax, DWORD PTR [esi+16488]
  00174	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00176	88 44 24 0c	 mov	 BYTE PTR _buf$2568[esp+16], al
  0017a	c1 e8 08	 shr	 eax, 8
  0017d	51		 push	 ecx
  0017e	88 44 24 11	 mov	 BYTE PTR _buf$2568[esp+21], al
  00182	c1 e8 08	 shr	 eax, 8
  00185	6a 01		 push	 1
  00187	88 44 24 16	 mov	 BYTE PTR _buf$2568[esp+26], al
  0018b	8d 4c 24 14	 lea	 ecx, DWORD PTR _buf$2568[esp+24]
  0018f	c1 e8 08	 shr	 eax, 8
  00192	6a 04		 push	 4
  00194	51		 push	 ecx
  00195	88 44 24 1f	 mov	 BYTE PTR _buf$2568[esp+35], al
  00199	e8 00 00 00 00	 call	 _fwrite
  0019e	83 c4 10	 add	 esp, 16			; 00000010H
  001a1	83 f8 01	 cmp	 eax, 1
  001a4	74 05		 je	 SHORT $L2573
  001a6	83 cf ff	 or	 edi, -1
  001a9	eb 71		 jmp	 SHORT $L2599
$L2573:

; 628  : 
; 629  :         if (err==ZIP_OK) /* compressed size, unknown */
; 630  :             err = ziplocal_putValue(zi->filezip,(uLong)zi->ci.stream.total_out,4); 

  001ab	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  001ae	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001b0	88 44 24 0c	 mov	 BYTE PTR _buf$2581[esp+16], al
  001b4	c1 e8 08	 shr	 eax, 8
  001b7	51		 push	 ecx
  001b8	88 44 24 11	 mov	 BYTE PTR _buf$2581[esp+21], al
  001bc	c1 e8 08	 shr	 eax, 8
  001bf	6a 01		 push	 1
  001c1	88 44 24 16	 mov	 BYTE PTR _buf$2581[esp+26], al
  001c5	8d 54 24 14	 lea	 edx, DWORD PTR _buf$2581[esp+24]
  001c9	c1 e8 08	 shr	 eax, 8
  001cc	6a 04		 push	 4
  001ce	52		 push	 edx
  001cf	88 44 24 1f	 mov	 BYTE PTR _buf$2581[esp+35], al
  001d3	e8 00 00 00 00	 call	 _fwrite
  001d8	83 c4 10	 add	 esp, 16			; 00000010H
  001db	83 f8 01	 cmp	 eax, 1
  001de	74 05		 je	 SHORT $L2586
  001e0	83 cf ff	 or	 edi, -1
  001e3	eb 37		 jmp	 SHORT $L2599
$L2586:

; 631  : 
; 632  :         if (err==ZIP_OK) /* uncompressed size, unknown */
; 633  :             err = ziplocal_putValue(zi->filezip,(uLong)zi->ci.stream.total_in,4);

  001e5	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  001e8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001ea	88 44 24 0c	 mov	 BYTE PTR _buf$2594[esp+16], al
  001ee	c1 e8 08	 shr	 eax, 8
  001f1	88 44 24 0d	 mov	 BYTE PTR _buf$2594[esp+17], al
  001f5	c1 e8 08	 shr	 eax, 8
  001f8	51		 push	 ecx
  001f9	88 44 24 12	 mov	 BYTE PTR _buf$2594[esp+22], al
  001fd	c1 e8 08	 shr	 eax, 8
  00200	6a 01		 push	 1
  00202	88 44 24 17	 mov	 BYTE PTR _buf$2594[esp+27], al
  00206	8d 44 24 14	 lea	 eax, DWORD PTR _buf$2594[esp+24]
  0020a	6a 04		 push	 4
  0020c	50		 push	 eax
  0020d	e8 00 00 00 00	 call	 _fwrite
  00212	83 c4 10	 add	 esp, 16			; 00000010H
  00215	8b f8		 mov	 edi, eax
  00217	4f		 dec	 edi
  00218	f7 df		 neg	 edi
  0021a	1b ff		 sbb	 edi, edi
$L2599:

; 634  : 
; 635  : 	    if (fseek(zi->filezip,
; 636  :                   cur_pos_inzip,SEEK_SET)!=0)

  0021c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0021e	6a 00		 push	 0
  00220	53		 push	 ebx
  00221	51		 push	 ecx
  00222	e8 00 00 00 00	 call	 _fseek
  00227	83 c4 0c	 add	 esp, 12			; 0000000cH
  0022a	85 c0		 test	 eax, eax
  0022c	74 03		 je	 SHORT $L2645

; 637  : 		    err = ZIP_ERRNO;

  0022e	83 cf ff	 or	 edi, -1
$L2645:

; 638  :     }
; 639  : 
; 640  :     zi->number_entry ++;

  00231	ff 86 70 40 00
	00		 inc	 DWORD PTR [esi+16496]
  00237	5b		 pop	 ebx

; 641  :     zi->in_opened_file_inzip = 0;
; 642  : 
; 643  :     return err;

  00238	8b c7		 mov	 eax, edi
  0023a	5f		 pop	 edi
  0023b	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00242	5e		 pop	 esi

; 644  : }

  00243	59		 pop	 ecx
  00244	c3		 ret	 0
@zipCloseFileInZip@4 ENDP
_TEXT	ENDS
PUBLIC	@zipClose@8
; Function compile flags: /Ogty
;	COMDAT @zipClose@8
_TEXT	SEGMENT
_buf$2738 = -16						; size = 4
_buf$2725 = -16						; size = 4
_buf$2712 = -16						; size = 4
_buf$2699 = -16						; size = 4
_buf$2686 = -16						; size = 4
_buf$2673 = -16						; size = 4
_buf$2660 = -16						; size = 4
_buf$2751 = -12						; size = 4
_size_global_comment$ = -12				; size = 4
_centraldir_pos_inzip$ = -8				; size = 4
_global_comment$ = -4					; size = 4
@zipClose@8 PROC NEAR					; COMDAT
; _file$ = ecx
; _global_comment$ = edx

; 649  : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	8b fa		 mov	 edi, edx

; 650  :     zip_internal* zi;
; 651  :     int err = 0;

  0000b	33 ed		 xor	 ebp, ebp

; 652  :     uLong size_centraldir = 0;

  0000d	33 db		 xor	 ebx, ebx

; 653  :     uLong centraldir_pos_inzip ;
; 654  :     uInt size_global_comment;
; 655  :     if (file == NULL)

  0000f	85 f6		 test	 esi, esi
  00011	89 7c 24 1c	 mov	 DWORD PTR _global_comment$[esp+32], edi
  00015	75 0d		 jne	 SHORT $L2419
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp

; 656  :         return ZIP_PARAMERROR;

  0001a	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  0001f	5b		 pop	 ebx

; 719  : }

  00020	83 c4 10	 add	 esp, 16			; 00000010H
  00023	c3		 ret	 0
$L2419:

; 657  :     zi = (zip_internal*)file;
; 658  : 
; 659  :     if (zi->in_opened_file_inzip == 1)

  00024	83 7e 0c 01	 cmp	 DWORD PTR [esi+12], 1
  00028	75 09		 jne	 SHORT $L2421

; 660  :     {
; 661  :         err = zipCloseFileInZip (file);

  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 @zipCloseFileInZip@4
  00031	8b e8		 mov	 ebp, eax
$L2421:

; 662  :     }
; 663  : 
; 664  :     if (global_comment==NULL)

  00033	85 ff		 test	 edi, edi
  00035	75 06		 jne	 SHORT $L2423

; 665  :         size_global_comment = 0;

  00037	89 7c 24 14	 mov	 DWORD PTR _size_global_comment$[esp+32], edi

; 666  :     else

  0003b	eb 12		 jmp	 SHORT $L2424
$L2423:

; 667  :         size_global_comment = strlen(global_comment);

  0003d	8b c7		 mov	 eax, edi
  0003f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L2804:
  00042	8a 08		 mov	 cl, BYTE PTR [eax]
  00044	40		 inc	 eax
  00045	84 c9		 test	 cl, cl
  00047	75 f9		 jne	 SHORT $L2804
  00049	2b c2		 sub	 eax, edx
  0004b	89 44 24 14	 mov	 DWORD PTR _size_global_comment$[esp+32], eax
$L2424:

; 668  : 
; 669  : 
; 670  :     centraldir_pos_inzip = ftell(zi->filezip);

  0004f	8b 06		 mov	 eax, DWORD PTR [esi]
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _ftell
  00057	83 c4 04	 add	 esp, 4

; 671  :     if (err==ZIP_OK)

  0005a	85 ed		 test	 ebp, ebp
  0005c	89 44 24 18	 mov	 DWORD PTR _centraldir_pos_inzip$[esp+32], eax
  00060	75 3e		 jne	 SHORT $L2806

; 672  :     {
; 673  :         linkedlist_datablock_internal* ldi = zi->central_dir.first_block ;

  00062	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 674  :         while (ldi!=NULL)

  00065	85 ff		 test	 edi, edi
  00067	74 37		 je	 SHORT $L2806
  00069	8d a4 24 00 00
	00 00		 npad	 7
$L2429:

; 675  :         {
; 676  :             if ((err==ZIP_OK) && (ldi->filled_in_this_block>0))

  00070	85 ed		 test	 ebp, ebp
  00072	75 21		 jne	 SHORT $L2805
  00074	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00077	85 c0		 test	 eax, eax
  00079	76 1a		 jbe	 SHORT $L2805

; 677  :                 if (fwrite(ldi->data,(uInt)ldi->filled_in_this_block,
; 678  :                                         1,zi->filezip) !=1 )

  0007b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0007d	51		 push	 ecx
  0007e	6a 01		 push	 1
  00080	50		 push	 eax
  00081	8d 57 10	 lea	 edx, DWORD PTR [edi+16]
  00084	52		 push	 edx
  00085	e8 00 00 00 00	 call	 _fwrite
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	83 f8 01	 cmp	 eax, 1
  00090	74 03		 je	 SHORT $L2805

; 679  :                     err = ZIP_ERRNO;

  00092	83 cd ff	 or	 ebp, -1
$L2805:

; 680  : 
; 681  :             size_centraldir += ldi->filled_in_this_block;

  00095	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 682  :             ldi = ldi->next_datablock;

  00098	8b 3f		 mov	 edi, DWORD PTR [edi]
  0009a	03 d9		 add	 ebx, ecx
  0009c	85 ff		 test	 edi, edi
  0009e	75 d0		 jne	 SHORT $L2429
$L2806:

; 683  :         }
; 684  :     }
; 685  :     free_datablock(zi->central_dir.first_block);

  000a0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a3	85 c0		 test	 eax, eax
  000a5	74 11		 je	 SHORT $L2653
$L2652:
  000a7	8b 38		 mov	 edi, DWORD PTR [eax]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 _free
  000af	83 c4 04	 add	 esp, 4
  000b2	85 ff		 test	 edi, edi
  000b4	8b c7		 mov	 eax, edi
  000b6	75 ef		 jne	 SHORT $L2652
$L2653:

; 686  : 
; 687  :     if (err==ZIP_OK) /* Magic End */

  000b8	85 ed		 test	 ebp, ebp
  000ba	0f 85 8e 01 00
	00		 jne	 $L2452

; 688  :         err = ziplocal_putValue(zi->filezip,(uLong)ENDHEADERMAGIC,4);

  000c0	8b 06		 mov	 eax, DWORD PTR [esi]
  000c2	50		 push	 eax
  000c3	6a 01		 push	 1
  000c5	8d 44 24 18	 lea	 eax, DWORD PTR _buf$2660[esp+40]
  000c9	6a 04		 push	 4
  000cb	50		 push	 eax
  000cc	c6 44 24 20 50	 mov	 BYTE PTR _buf$2660[esp+48], 80 ; 00000050H
  000d1	c6 44 24 21 4b	 mov	 BYTE PTR _buf$2660[esp+49], 75 ; 0000004bH
  000d6	c6 44 24 22 05	 mov	 BYTE PTR _buf$2660[esp+50], 5
  000db	c6 44 24 23 06	 mov	 BYTE PTR _buf$2660[esp+51], 6
  000e0	e8 00 00 00 00	 call	 _fwrite
  000e5	83 c4 10	 add	 esp, 16			; 00000010H
  000e8	83 f8 01	 cmp	 eax, 1
  000eb	0f 85 5a 01 00
	00		 jne	 $L2807

; 689  : 
; 690  :     if (err==ZIP_OK) /* number of this disk */
; 691  :         err = ziplocal_putValue(zi->filezip,(uLong)0,2);

  000f1	8b 06		 mov	 eax, DWORD PTR [esi]
  000f3	50		 push	 eax
  000f4	6a 01		 push	 1
  000f6	8d 4c 24 18	 lea	 ecx, DWORD PTR _buf$2673[esp+40]
  000fa	6a 02		 push	 2
  000fc	51		 push	 ecx
  000fd	c6 44 24 20 00	 mov	 BYTE PTR _buf$2673[esp+48], 0
  00102	c6 44 24 21 00	 mov	 BYTE PTR _buf$2673[esp+49], 0
  00107	e8 00 00 00 00	 call	 _fwrite
  0010c	83 c4 10	 add	 esp, 16			; 00000010H
  0010f	83 f8 01	 cmp	 eax, 1
  00112	0f 85 33 01 00
	00		 jne	 $L2807

; 692  : 
; 693  :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */
; 694  :         err = ziplocal_putValue(zi->filezip,(uLong)0,2);

  00118	8b 06		 mov	 eax, DWORD PTR [esi]
  0011a	50		 push	 eax
  0011b	6a 01		 push	 1
  0011d	8d 54 24 18	 lea	 edx, DWORD PTR _buf$2686[esp+40]
  00121	6a 02		 push	 2
  00123	52		 push	 edx
  00124	c6 44 24 20 00	 mov	 BYTE PTR _buf$2686[esp+48], 0
  00129	c6 44 24 21 00	 mov	 BYTE PTR _buf$2686[esp+49], 0
  0012e	e8 00 00 00 00	 call	 _fwrite
  00133	83 c4 10	 add	 esp, 16			; 00000010H
  00136	83 f8 01	 cmp	 eax, 1
  00139	0f 85 0c 01 00
	00		 jne	 $L2807

; 695  : 
; 696  :     if (err==ZIP_OK) /* total number of entries in the central dir on this disk */
; 697  :         err = ziplocal_putValue(zi->filezip,(uLong)zi->number_entry,2);

  0013f	8b 86 70 40 00
	00		 mov	 eax, DWORD PTR [esi+16496]
  00145	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00147	51		 push	 ecx
  00148	88 44 24 14	 mov	 BYTE PTR _buf$2699[esp+36], al
  0014c	c1 e8 08	 shr	 eax, 8
  0014f	6a 01		 push	 1
  00151	88 44 24 19	 mov	 BYTE PTR _buf$2699[esp+41], al
  00155	8d 44 24 18	 lea	 eax, DWORD PTR _buf$2699[esp+40]
  00159	6a 02		 push	 2
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 _fwrite
  00161	83 c4 10	 add	 esp, 16			; 00000010H
  00164	83 f8 01	 cmp	 eax, 1
  00167	0f 85 de 00 00
	00		 jne	 $L2807

; 698  : 
; 699  :     if (err==ZIP_OK) /* total number of entries in the central dir */
; 700  :         err = ziplocal_putValue(zi->filezip,(uLong)zi->number_entry,2);

  0016d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0016f	8b 86 70 40 00
	00		 mov	 eax, DWORD PTR [esi+16496]
  00175	51		 push	 ecx
  00176	6a 01		 push	 1
  00178	88 44 24 18	 mov	 BYTE PTR _buf$2712[esp+40], al
  0017c	8d 4c 24 18	 lea	 ecx, DWORD PTR _buf$2712[esp+40]
  00180	c1 e8 08	 shr	 eax, 8
  00183	6a 02		 push	 2
  00185	51		 push	 ecx
  00186	88 44 24 21	 mov	 BYTE PTR _buf$2712[esp+49], al
  0018a	e8 00 00 00 00	 call	 _fwrite
  0018f	83 c4 10	 add	 esp, 16			; 00000010H
  00192	83 f8 01	 cmp	 eax, 1
  00195	0f 85 b0 00 00
	00		 jne	 $L2807

; 701  : 
; 702  :     if (err==ZIP_OK) /* size of the central directory */
; 703  :         err = ziplocal_putValue(zi->filezip,(uLong)size_centraldir,4);

  0019b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019d	88 5c 24 10	 mov	 BYTE PTR _buf$2725[esp+32], bl
  001a1	c1 eb 08	 shr	 ebx, 8
  001a4	51		 push	 ecx
  001a5	8b c3		 mov	 eax, ebx
  001a7	88 44 24 15	 mov	 BYTE PTR _buf$2725[esp+37], al
  001ab	c1 e8 08	 shr	 eax, 8
  001ae	6a 01		 push	 1
  001b0	88 44 24 1a	 mov	 BYTE PTR _buf$2725[esp+42], al
  001b4	8d 54 24 18	 lea	 edx, DWORD PTR _buf$2725[esp+40]
  001b8	c1 e8 08	 shr	 eax, 8
  001bb	6a 04		 push	 4
  001bd	52		 push	 edx
  001be	88 44 24 23	 mov	 BYTE PTR _buf$2725[esp+51], al
  001c2	e8 00 00 00 00	 call	 _fwrite
  001c7	83 c4 10	 add	 esp, 16			; 00000010H
  001ca	83 f8 01	 cmp	 eax, 1
  001cd	75 7c		 jne	 SHORT $L2807

; 704  : 
; 705  :     if (err==ZIP_OK) /* offset of start of central directory with respect to the 
; 706  : 	                        starting disk number */
; 707  :         err = ziplocal_putValue(zi->filezip,(uLong)centraldir_pos_inzip ,4);

  001cf	8b 44 24 18	 mov	 eax, DWORD PTR _centraldir_pos_inzip$[esp+32]
  001d3	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001d5	88 44 24 10	 mov	 BYTE PTR _buf$2738[esp+32], al
  001d9	c1 e8 08	 shr	 eax, 8
  001dc	88 44 24 11	 mov	 BYTE PTR _buf$2738[esp+33], al
  001e0	c1 e8 08	 shr	 eax, 8
  001e3	51		 push	 ecx
  001e4	88 44 24 16	 mov	 BYTE PTR _buf$2738[esp+38], al
  001e8	c1 e8 08	 shr	 eax, 8
  001eb	6a 01		 push	 1
  001ed	88 44 24 1b	 mov	 BYTE PTR _buf$2738[esp+43], al
  001f1	8d 44 24 18	 lea	 eax, DWORD PTR _buf$2738[esp+40]
  001f5	6a 04		 push	 4
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 _fwrite
  001fd	83 c4 10	 add	 esp, 16			; 00000010H
  00200	83 f8 01	 cmp	 eax, 1
  00203	75 46		 jne	 SHORT $L2807

; 708  : 
; 709  :     if (err==ZIP_OK) /* zipfile comment length */
; 710  :         err = ziplocal_putValue(zi->filezip,(uLong)size_global_comment,2);

  00205	8b 06		 mov	 eax, DWORD PTR [esi]
  00207	8b 5c 24 14	 mov	 ebx, DWORD PTR _size_global_comment$[esp+32]
  0020b	50		 push	 eax
  0020c	6a 01		 push	 1
  0020e	8b cb		 mov	 ecx, ebx
  00210	8d 54 24 1c	 lea	 edx, DWORD PTR _buf$2751[esp+40]
  00214	c1 e9 08	 shr	 ecx, 8
  00217	6a 02		 push	 2
  00219	52		 push	 edx
  0021a	88 5c 24 24	 mov	 BYTE PTR _buf$2751[esp+48], bl
  0021e	88 4c 24 25	 mov	 BYTE PTR _buf$2751[esp+49], cl
  00222	e8 00 00 00 00	 call	 _fwrite
  00227	83 c4 10	 add	 esp, 16			; 00000010H
  0022a	83 f8 01	 cmp	 eax, 1
  0022d	75 1c		 jne	 SHORT $L2807

; 711  : 
; 712  :     if ((err==ZIP_OK) && (size_global_comment>0))

  0022f	85 db		 test	 ebx, ebx
  00231	76 1b		 jbe	 SHORT $L2452

; 713  :         if (fwrite(global_comment,(uInt)size_global_comment,1,zi->filezip) !=1 )

  00233	8b 06		 mov	 eax, DWORD PTR [esi]
  00235	8b 4c 24 1c	 mov	 ecx, DWORD PTR _global_comment$[esp+32]
  00239	50		 push	 eax
  0023a	6a 01		 push	 1
  0023c	53		 push	 ebx
  0023d	51		 push	 ecx
  0023e	e8 00 00 00 00	 call	 _fwrite
  00243	83 c4 10	 add	 esp, 16			; 00000010H
  00246	83 f8 01	 cmp	 eax, 1
  00249	74 03		 je	 SHORT $L2452
$L2807:

; 714  :                 err = ZIP_ERRNO;

  0024b	83 cd ff	 or	 ebp, -1
$L2452:

; 715  :     fclose(zi->filezip);

  0024e	8b 16		 mov	 edx, DWORD PTR [esi]
  00250	52		 push	 edx
  00251	e8 00 00 00 00	 call	 _fclose

; 716  :     TRYFREE(zi);

  00256	56		 push	 esi
  00257	e8 00 00 00 00	 call	 _free
  0025c	83 c4 08	 add	 esp, 8
  0025f	5f		 pop	 edi
  00260	5e		 pop	 esi

; 717  : 
; 718  :     return err;

  00261	8b c5		 mov	 eax, ebp
  00263	5d		 pop	 ebp
  00264	5b		 pop	 ebx

; 719  : }

  00265	83 c4 10	 add	 esp, 16			; 00000010H
  00268	c3		 ret	 0
@zipClose@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
PUBLIC	??_C@_05DOIEBMOI@1?41?44?$AA@			; `string'
PUBLIC	@zipOpenNewFileInZip@40
EXTRN	@deflateInit2_@32:NEAR
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05DOIEBMOI@1?41?44?$AA@
CONST	SEGMENT
??_C@_05DOIEBMOI@1?41?44?$AA@ DB '1.1.4', 00H		; `string'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT @zipOpenNewFileInZip@40
_TEXT	SEGMENT
_filename$ = -4						; size = 4
tv2488 = 8						; size = 4
_zipfi$ = 8						; size = 4
_extrafield_local$ = 12					; size = 4
_size_extrafield_local$ = 16				; size = 4
_extrafield_global$ = 20				; size = 4
_buf$3110 = 24						; size = 4
_buf$3097 = 24						; size = 4
_buf$3084 = 24						; size = 4
_buf$3070 = 24						; size = 4
_buf$3057 = 24						; size = 4
_buf$3044 = 24						; size = 4
_buf$3031 = 24						; size = 4
_buf$3018 = 24						; size = 4
_buf$3005 = 24						; size = 4
_buf$2992 = 24						; size = 4
_size_extrafield_global$ = 24				; size = 4
_size_filename$ = 28					; size = 4
_comment$ = 28						; size = 4
_size_comment$ = 32					; size = 4
_method$ = 32						; size = 4
_level$ = 36						; size = 4
@zipOpenNewFileInZip@40 PROC NEAR			; COMDAT
; _file$ = ecx
; _filename$ = edx

; 340  : {

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	57		 push	 edi
  00004	8b f1		 mov	 esi, ecx

; 341  :     zip_internal* zi;
; 342  :     uInt size_filename;
; 343  :     uInt size_comment;
; 344  :     uInt i;
; 345  :     int err = ZIP_OK;
; 346  : 
; 347  :     if (file == NULL)

  00006	33 db		 xor	 ebx, ebx
  00008	3b f3		 cmp	 esi, ebx
  0000a	8b fa		 mov	 edi, edx
  0000c	89 7c 24 0c	 mov	 DWORD PTR _filename$[esp+16], edi
  00010	75 0c		 jne	 SHORT $L2246
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi

; 348  :         return ZIP_PARAMERROR;

  00014	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00019	5b		 pop	 ebx

; 497  : }

  0001a	59		 pop	 ecx
  0001b	c2 20 00	 ret	 32			; 00000020H
$L2246:
  0001e	55		 push	 ebp

; 349  :     if ((method!=0) && (method!=Z_DEFLATED))

  0001f	8b 6c 24 30	 mov	 ebp, DWORD PTR _method$[esp+16]
  00023	3b eb		 cmp	 ebp, ebx
  00025	74 12		 je	 SHORT $L3254
  00027	83 fd 08	 cmp	 ebp, 8
  0002a	74 0d		 je	 SHORT $L3254
  0002c	5d		 pop	 ebp
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi

; 350  :         return ZIP_PARAMERROR;

  0002f	b8 9a ff ff ff	 mov	 eax, -102		; ffffff9aH
  00034	5b		 pop	 ebx

; 497  : }

  00035	59		 pop	 ecx
  00036	c2 20 00	 ret	 32			; 00000020H
$L3254:

; 351  : 
; 352  :     zi = (zip_internal*)file;
; 353  : 
; 354  :     if (zi->in_opened_file_inzip == 1)

  00039	83 7e 0c 01	 cmp	 DWORD PTR [esi+12], 1
  0003d	75 0f		 jne	 SHORT $L2250

; 355  :     {
; 356  :         err = zipCloseFileInZip (file);

  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 @zipCloseFileInZip@4

; 357  :         if (err != ZIP_OK)

  00046	3b c3		 cmp	 eax, ebx

; 358  :             return err;

  00048	0f 85 e3 04 00
	00		 jne	 $L3256
$L2250:

; 359  :     }
; 360  : 
; 361  : 
; 362  :     if (filename==NULL)

  0004e	3b fb		 cmp	 edi, ebx
  00050	75 0c		 jne	 SHORT $L2252

; 363  :         filename="-";

  00052	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR _filename$[esp+20], OFFSET FLAT:??_C@_01JOAMLHOP@?9?$AA@
  0005a	8b 7c 24 10	 mov	 edi, DWORD PTR _filename$[esp+20]
$L2252:

; 364  : 
; 365  :     if (comment==NULL)

  0005e	8b 44 24 2c	 mov	 eax, DWORD PTR _comment$[esp+16]
  00062	3b c3		 cmp	 eax, ebx
  00064	75 06		 jne	 SHORT $L2255

; 366  :         size_comment = 0;

  00066	89 5c 24 30	 mov	 DWORD PTR _size_comment$[esp+16], ebx

; 367  :     else

  0006a	eb 11		 jmp	 SHORT $L2256
$L2255:

; 368  :         size_comment = strlen(comment);

  0006c	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0006f	90		 npad	 1
$L3249:
  00070	8a 08		 mov	 cl, BYTE PTR [eax]
  00072	40		 inc	 eax
  00073	3a cb		 cmp	 cl, bl
  00075	75 f9		 jne	 SHORT $L3249
  00077	2b c2		 sub	 eax, edx
  00079	89 44 24 30	 mov	 DWORD PTR _size_comment$[esp+16], eax
$L2256:

; 369  : 
; 370  :     size_filename = strlen(filename);

  0007d	8b c7		 mov	 eax, edi
  0007f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L3250:
  00082	8a 08		 mov	 cl, BYTE PTR [eax]
  00084	40		 inc	 eax
  00085	3a cb		 cmp	 cl, bl
  00087	75 f9		 jne	 SHORT $L3250

; 371  : 
; 372  :     if (zipfi == NULL)

  00089	8b 7c 24 18	 mov	 edi, DWORD PTR _zipfi$[esp+16]
  0008d	2b c2		 sub	 eax, edx
  0008f	3b fb		 cmp	 edi, ebx
  00091	89 44 24 2c	 mov	 DWORD PTR _size_filename$[esp+16], eax
  00095	75 08		 jne	 SHORT $L2258

; 373  :         zi->ci.dosDate = 0;

  00097	89 9e 64 40 00
	00		 mov	 DWORD PTR [esi+16484], ebx

; 374  :     else

  0009d	eb 14		 jmp	 SHORT $L2261
$L2258:

; 375  :     {
; 376  :         if (zipfi->dosDate != 0)

  0009f	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  000a2	3b c3		 cmp	 eax, ebx

; 377  :             zi->ci.dosDate = zipfi->dosDate;
; 378  :         else zi->ci.dosDate = ziplocal_TmzDateToDosDate(&zipfi->tmz_date,zipfi->dosDate);

  000a4	75 07		 jne	 SHORT $L3257
  000a6	8b d7		 mov	 edx, edi
  000a8	e8 00 00 00 00	 call	 @ziplocal_TmzDateToDosDate@8
$L3257:
  000ad	89 86 64 40 00
	00		 mov	 DWORD PTR [esi+16484], eax
$L2261:

; 379  :     }
; 380  : 
; 381  :     zi->ci.flag = 0;
; 382  :     if ((level==8) || (level==9))

  000b3	8b 44 24 34	 mov	 eax, DWORD PTR _level$[esp+16]
  000b7	83 f8 08	 cmp	 eax, 8
  000ba	89 5e 5c	 mov	 DWORD PTR [esi+92], ebx
  000bd	74 05		 je	 SHORT $L2263
  000bf	83 f8 09	 cmp	 eax, 9
  000c2	75 07		 jne	 SHORT $L3251
$L2263:

; 383  :       zi->ci.flag |= 2;

  000c4	c7 46 5c 02 00
	00 00		 mov	 DWORD PTR [esi+92], 2
$L3251:

; 384  :     if ((level==2))

  000cb	83 f8 02	 cmp	 eax, 2
  000ce	75 08		 jne	 SHORT $L2264

; 385  :       zi->ci.flag |= 4;

  000d0	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  000d3	83 c8 04	 or	 eax, 4

; 386  :     if ((level==1))

  000d6	eb 0b		 jmp	 SHORT $L3258
$L2264:
  000d8	83 f8 01	 cmp	 eax, 1
  000db	75 09		 jne	 SHORT $L3252

; 387  :       zi->ci.flag |= 6;

  000dd	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  000e0	83 c8 06	 or	 eax, 6
$L3258:
  000e3	89 46 5c	 mov	 DWORD PTR [esi+92], eax
$L3252:

; 388  : 
; 389  :     zi->ci.crc32 = 0;
; 390  :     zi->ci.method = method;
; 391  :     zi->ci.stream_initialised = 0;
; 392  :     zi->ci.pos_in_buffered_data = 0;
; 393  :     zi->ci.pos_local_header = ftell(zi->filezip);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]
  000e8	50		 push	 eax
  000e9	89 9e 68 40 00
	00		 mov	 DWORD PTR [esi+16488], ebx
  000ef	89 6e 60	 mov	 DWORD PTR [esi+96], ebp
  000f2	89 5e 48	 mov	 DWORD PTR [esi+72], ebx
  000f5	89 5e 4c	 mov	 DWORD PTR [esi+76], ebx
  000f8	e8 00 00 00 00	 call	 _ftell

; 394  :     zi->ci.size_centralheader = SIZECENTRALHEADER + size_filename + 
; 395  :                                       size_extrafield_global + size_comment;

  000fd	8b 54 24 34	 mov	 edx, DWORD PTR _size_comment$[esp+20]
  00101	8b 4c 24 30	 mov	 ecx, DWORD PTR _size_filename$[esp+20]
  00105	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00108	8b 44 24 2c	 mov	 eax, DWORD PTR _size_extrafield_global$[esp+20]
  0010c	03 ca		 add	 ecx, edx
  0010e	8d 44 01 2e	 lea	 eax, DWORD PTR [ecx+eax+46]

; 396  :     zi->ci.central_header = (char*)ALLOC((uInt)zi->ci.size_centralheader);

  00112	50		 push	 eax
  00113	89 46 58	 mov	 DWORD PTR [esi+88], eax
  00116	e8 00 00 00 00	 call	 _malloc
  0011b	89 46 54	 mov	 DWORD PTR [esi+84], eax

; 397  : 
; 398  :     ziplocal_putValue_inmemory(zi->ci.central_header,(uLong)CENTRALHEADERMAGIC,4);

  0011e	c6 00 50	 mov	 BYTE PTR [eax], 80	; 00000050H
  00121	c6 40 01 4b	 mov	 BYTE PTR [eax+1], 75	; 0000004bH
  00125	c6 40 02 01	 mov	 BYTE PTR [eax+2], 1
  00129	c6 40 03 02	 mov	 BYTE PTR [eax+3], 2

; 399  :     /* version info */
; 400  :     ziplocal_putValue_inmemory(zi->ci.central_header+4,(uLong)VERSIONMADEBY,2);

  0012d	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00130	88 58 04	 mov	 BYTE PTR [eax+4], bl
  00133	88 58 05	 mov	 BYTE PTR [eax+5], bl
  00136	83 c0 04	 add	 eax, 4

; 401  :     ziplocal_putValue_inmemory(zi->ci.central_header+6,(uLong)20,2);

  00139	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  0013c	c6 40 06 14	 mov	 BYTE PTR [eax+6], 20	; 00000014H
  00140	88 58 07	 mov	 BYTE PTR [eax+7], bl

; 402  :     ziplocal_putValue_inmemory(zi->ci.central_header+8,(uLong)zi->ci.flag,2);

  00143	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00146	83 c0 06	 add	 eax, 6
  00149	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0014c	88 41 08	 mov	 BYTE PTR [ecx+8], al
  0014f	c1 e8 08	 shr	 eax, 8
  00152	88 41 09	 mov	 BYTE PTR [ecx+9], al

; 403  :     ziplocal_putValue_inmemory(zi->ci.central_header+10,(uLong)zi->ci.method,2);

  00155	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00158	83 c1 08	 add	 ecx, 8
  0015b	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  0015e	88 41 0a	 mov	 BYTE PTR [ecx+10], al
  00161	c1 e8 08	 shr	 eax, 8
  00164	88 41 0b	 mov	 BYTE PTR [ecx+11], al

; 404  :     ziplocal_putValue_inmemory(zi->ci.central_header+12,(uLong)zi->ci.dosDate,4);

  00167	8b 86 64 40 00
	00		 mov	 eax, DWORD PTR [esi+16484]
  0016d	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00170	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00173	88 41 0c	 mov	 BYTE PTR [ecx+12], al
  00176	c1 e8 08	 shr	 eax, 8
  00179	88 41 0d	 mov	 BYTE PTR [ecx+13], al

; 405  :     ziplocal_putValue_inmemory(zi->ci.central_header+16,(uLong)0,4); /*crc*/
; 406  :     ziplocal_putValue_inmemory(zi->ci.central_header+20,(uLong)0,4); /*compr size*/
; 407  :     ziplocal_putValue_inmemory(zi->ci.central_header+24,(uLong)0,4); /*uncompr size*/
; 408  :     ziplocal_putValue_inmemory(zi->ci.central_header+28,(uLong)size_filename,2);

  0017c	8b 54 24 34	 mov	 edx, DWORD PTR _size_filename$[esp+24]
  00180	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00183	c1 e8 08	 shr	 eax, 8
  00186	88 41 02	 mov	 BYTE PTR [ecx+2], al
  00189	c1 e8 08	 shr	 eax, 8
  0018c	88 41 03	 mov	 BYTE PTR [ecx+3], al
  0018f	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00192	88 58 10	 mov	 BYTE PTR [eax+16], bl
  00195	88 58 11	 mov	 BYTE PTR [eax+17], bl
  00198	88 58 12	 mov	 BYTE PTR [eax+18], bl
  0019b	88 58 13	 mov	 BYTE PTR [eax+19], bl
  0019e	83 c0 10	 add	 eax, 16			; 00000010H
  001a1	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  001a4	83 c0 14	 add	 eax, 20			; 00000014H
  001a7	88 18		 mov	 BYTE PTR [eax], bl
  001a9	88 58 01	 mov	 BYTE PTR [eax+1], bl
  001ac	88 58 02	 mov	 BYTE PTR [eax+2], bl
  001af	88 58 03	 mov	 BYTE PTR [eax+3], bl
  001b2	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  001b5	83 c0 18	 add	 eax, 24			; 00000018H
  001b8	88 18		 mov	 BYTE PTR [eax], bl
  001ba	88 58 01	 mov	 BYTE PTR [eax+1], bl
  001bd	88 58 02	 mov	 BYTE PTR [eax+2], bl
  001c0	88 58 03	 mov	 BYTE PTR [eax+3], bl
  001c3	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  001c6	83 c0 1c	 add	 eax, 28			; 0000001cH
  001c9	8b ca		 mov	 ecx, edx
  001cb	c1 e9 08	 shr	 ecx, 8
  001ce	88 48 01	 mov	 BYTE PTR [eax+1], cl
  001d1	88 10		 mov	 BYTE PTR [eax], dl

; 409  :     ziplocal_putValue_inmemory(zi->ci.central_header+30,(uLong)size_extrafield_global,2);

  001d3	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  001d6	83 c4 08	 add	 esp, 8
  001d9	89 4c 24 18	 mov	 DWORD PTR tv2488[esp+16], ecx
  001dd	8b 4c 24 28	 mov	 ecx, DWORD PTR _size_extrafield_global$[esp+16]
  001e1	83 c0 1e	 add	 eax, 30			; 0000001eH
  001e4	88 08		 mov	 BYTE PTR [eax], cl
  001e6	c1 e9 08	 shr	 ecx, 8
  001e9	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 410  :     ziplocal_putValue_inmemory(zi->ci.central_header+32,(uLong)size_comment,2);

  001ec	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  001ef	8b 4c 24 30	 mov	 ecx, DWORD PTR _size_comment$[esp+16]
  001f3	83 c0 20	 add	 eax, 32			; 00000020H
  001f6	88 08		 mov	 BYTE PTR [eax], cl
  001f8	c1 e9 08	 shr	 ecx, 8
  001fb	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 411  :     ziplocal_putValue_inmemory(zi->ci.central_header+34,(uLong)0,2); /*disk nm start*/

  001fe	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00201	83 c0 22	 add	 eax, 34			; 00000022H

; 412  : 
; 413  :     if (zipfi==NULL)

  00204	3b fb		 cmp	 edi, ebx
  00206	88 18		 mov	 BYTE PTR [eax], bl
  00208	88 58 01	 mov	 BYTE PTR [eax+1], bl
  0020b	75 1e		 jne	 SHORT $L2282

; 414  :         ziplocal_putValue_inmemory(zi->ci.central_header+36,(uLong)0,2); 

  0020d	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  00210	83 c0 24	 add	 eax, 36			; 00000024H
  00213	88 18		 mov	 BYTE PTR [eax], bl
  00215	88 58 01	 mov	 BYTE PTR [eax+1], bl

; 417  : 
; 418  :     if (zipfi==NULL)
; 419  :         ziplocal_putValue_inmemory(zi->ci.central_header+38,(uLong)0,4); 

  00218	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  0021b	83 c0 26	 add	 eax, 38			; 00000026H
  0021e	88 18		 mov	 BYTE PTR [eax], bl
  00220	88 58 01	 mov	 BYTE PTR [eax+1], bl
  00223	88 58 02	 mov	 BYTE PTR [eax+2], bl
  00226	88 58 03	 mov	 BYTE PTR [eax+3], bl

; 420  :     else

  00229	eb 2f		 jmp	 SHORT $L2976
$L2282:

; 415  :     else
; 416  :         ziplocal_putValue_inmemory(zi->ci.central_header+36,(uLong)zipfi->internal_fa,2); 

  0022b	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  0022e	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00231	88 41 24	 mov	 BYTE PTR [ecx+36], al
  00234	83 c1 24	 add	 ecx, 36			; 00000024H
  00237	c1 e8 08	 shr	 eax, 8
  0023a	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 421  :         ziplocal_putValue_inmemory(zi->ci.central_header+38,(uLong)zipfi->external_fa,4);

  0023d	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00240	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00243	83 c1 26	 add	 ecx, 38			; 00000026H
  00246	88 01		 mov	 BYTE PTR [ecx], al
  00248	c1 e8 08	 shr	 eax, 8
  0024b	88 41 01	 mov	 BYTE PTR [ecx+1], al
  0024e	c1 e8 08	 shr	 eax, 8
  00251	88 41 02	 mov	 BYTE PTR [ecx+2], al
  00254	c1 e8 08	 shr	 eax, 8
  00257	88 41 03	 mov	 BYTE PTR [ecx+3], al
$L2976:

; 422  : 
; 423  :     ziplocal_putValue_inmemory(zi->ci.central_header+42,(uLong)zi->ci.pos_local_header,4);

  0025a	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  0025d	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  00260	83 c1 2a	 add	 ecx, 42			; 0000002aH
  00263	88 01		 mov	 BYTE PTR [ecx], al
  00265	c1 e8 08	 shr	 eax, 8
  00268	88 41 01	 mov	 BYTE PTR [ecx+1], al
  0026b	c1 e8 08	 shr	 eax, 8
  0026e	88 41 02	 mov	 BYTE PTR [ecx+2], al
  00271	c1 e8 08	 shr	 eax, 8

; 424  : 
; 425  :     for (i=0;i<size_filename;i++)

  00274	33 ff		 xor	 edi, edi
  00276	3b d3		 cmp	 edx, ebx
  00278	88 41 03	 mov	 BYTE PTR [ecx+3], al
  0027b	76 13		 jbe	 SHORT $L2294
  0027d	8b 6c 24 10	 mov	 ebp, DWORD PTR _filename$[esp+20]
$L2292:

; 426  :         *(zi->ci.central_header+SIZECENTRALHEADER+i) = *(filename+i);

  00281	8a 04 2f	 mov	 al, BYTE PTR [edi+ebp]
  00284	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00287	88 44 39 2e	 mov	 BYTE PTR [ecx+edi+46], al
  0028b	47		 inc	 edi
  0028c	3b fa		 cmp	 edi, edx
  0028e	72 f1		 jb	 SHORT $L2292
$L2294:

; 427  : 
; 428  :     for (i=0;i<size_extrafield_global;i++)

  00290	8b 6c 24 28	 mov	 ebp, DWORD PTR _size_extrafield_global$[esp+16]
  00294	33 ff		 xor	 edi, edi
  00296	3b eb		 cmp	 ebp, ebx
  00298	76 1b		 jbe	 SHORT $L2297
  0029a	8d 9b 00 00 00
	00		 npad	 6
$L3255:

; 429  :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+i) =
; 430  :               *(((const char*)extrafield_global)+i);

  002a0	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  002a3	8b 44 24 24	 mov	 eax, DWORD PTR _extrafield_global$[esp+16]
  002a7	8a 04 07	 mov	 al, BYTE PTR [edi+eax]
  002aa	03 cf		 add	 ecx, edi
  002ac	47		 inc	 edi
  002ad	3b fd		 cmp	 edi, ebp
  002af	88 44 11 2e	 mov	 BYTE PTR [ecx+edx+46], al
  002b3	72 eb		 jb	 SHORT $L3255
$L2297:

; 431  : 
; 432  :     for (i=0;i<size_comment;i++)

  002b5	8b 44 24 30	 mov	 eax, DWORD PTR _size_comment$[esp+16]
  002b9	33 ff		 xor	 edi, edi
  002bb	3b c3		 cmp	 eax, ebx
  002bd	76 1c		 jbe	 SHORT $L2301
  002bf	90		 npad	 1
$L3253:

; 433  :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+
; 434  :               size_extrafield_global+i) = *(filename+i);

  002c0	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  002c3	8b 44 24 10	 mov	 eax, DWORD PTR _filename$[esp+20]
  002c7	8a 04 07	 mov	 al, BYTE PTR [edi+eax]
  002ca	03 cf		 add	 ecx, edi
  002cc	03 ca		 add	 ecx, edx
  002ce	88 44 29 2e	 mov	 BYTE PTR [ecx+ebp+46], al
  002d2	8b 44 24 30	 mov	 eax, DWORD PTR _size_comment$[esp+16]
  002d6	47		 inc	 edi
  002d7	3b f8		 cmp	 edi, eax
  002d9	72 e5		 jb	 SHORT $L3253
$L2301:

; 435  :     if (zi->ci.central_header == NULL)

  002db	39 5e 54	 cmp	 DWORD PTR [esi+84], ebx
  002de	75 0d		 jne	 SHORT $L2303
  002e0	5d		 pop	 ebp
  002e1	5f		 pop	 edi
  002e2	5e		 pop	 esi

; 436  :         return ZIP_INTERNALERROR;

  002e3	b8 98 ff ff ff	 mov	 eax, -104		; ffffff98H
  002e8	5b		 pop	 ebx

; 497  : }

  002e9	59		 pop	 ecx
  002ea	c2 20 00	 ret	 32			; 00000020H
$L2303:

; 437  : 
; 438  :     /* write the local header */
; 439  :     err = ziplocal_putValue(zi->filezip,(uLong)LOCALHEADERMAGIC,4);

  002ed	8b 06		 mov	 eax, DWORD PTR [esi]
  002ef	50		 push	 eax
  002f0	bd 01 00 00 00	 mov	 ebp, 1
  002f5	55		 push	 ebp
  002f6	8d 4c 24 30	 lea	 ecx, DWORD PTR _buf$2992[esp+24]
  002fa	6a 04		 push	 4
  002fc	51		 push	 ecx
  002fd	c6 44 24 38 50	 mov	 BYTE PTR _buf$2992[esp+32], 80 ; 00000050H
  00302	c6 44 24 39 4b	 mov	 BYTE PTR _buf$2992[esp+33], 75 ; 0000004bH
  00307	c6 44 24 3a 03	 mov	 BYTE PTR _buf$2992[esp+34], 3
  0030c	c6 44 24 3b 04	 mov	 BYTE PTR _buf$2992[esp+35], 4
  00311	e8 00 00 00 00	 call	 _fwrite
  00316	83 c4 10	 add	 esp, 16			; 00000010H
  00319	3b c5		 cmp	 eax, ebp
  0031b	0f 85 bc 01 00
	00		 jne	 $L3259

; 440  : 
; 441  :     if (err==ZIP_OK)
; 442  :         err = ziplocal_putValue(zi->filezip,(uLong)20,2);/* version needed to extract */

  00321	8b 06		 mov	 eax, DWORD PTR [esi]
  00323	50		 push	 eax
  00324	55		 push	 ebp
  00325	8d 54 24 30	 lea	 edx, DWORD PTR _buf$3005[esp+24]
  00329	6a 02		 push	 2
  0032b	52		 push	 edx
  0032c	c6 44 24 38 14	 mov	 BYTE PTR _buf$3005[esp+32], 20 ; 00000014H
  00331	88 5c 24 39	 mov	 BYTE PTR _buf$3005[esp+33], bl
  00335	e8 00 00 00 00	 call	 _fwrite
  0033a	83 c4 10	 add	 esp, 16			; 00000010H
  0033d	3b c5		 cmp	 eax, ebp
  0033f	0f 85 98 01 00
	00		 jne	 $L3259

; 443  :     if (err==ZIP_OK)
; 444  :         err = ziplocal_putValue(zi->filezip,(uLong)zi->ci.flag,2);

  00345	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00348	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0034a	51		 push	 ecx
  0034b	88 44 24 2c	 mov	 BYTE PTR _buf$3018[esp+20], al
  0034f	c1 e8 08	 shr	 eax, 8
  00352	55		 push	 ebp
  00353	88 44 24 31	 mov	 BYTE PTR _buf$3018[esp+25], al
  00357	8d 44 24 30	 lea	 eax, DWORD PTR _buf$3018[esp+24]
  0035b	6a 02		 push	 2
  0035d	50		 push	 eax
  0035e	e8 00 00 00 00	 call	 _fwrite
  00363	83 c4 10	 add	 esp, 16			; 00000010H
  00366	3b c5		 cmp	 eax, ebp
  00368	0f 85 6f 01 00
	00		 jne	 $L3259

; 445  : 
; 446  :     if (err==ZIP_OK)
; 447  :         err = ziplocal_putValue(zi->filezip,(uLong)zi->ci.method,2);

  0036e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00370	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00373	51		 push	 ecx
  00374	55		 push	 ebp
  00375	88 44 24 30	 mov	 BYTE PTR _buf$3031[esp+24], al
  00379	8d 4c 24 30	 lea	 ecx, DWORD PTR _buf$3031[esp+24]
  0037d	c1 e8 08	 shr	 eax, 8
  00380	6a 02		 push	 2
  00382	51		 push	 ecx
  00383	88 44 24 39	 mov	 BYTE PTR _buf$3031[esp+33], al
  00387	e8 00 00 00 00	 call	 _fwrite
  0038c	83 c4 10	 add	 esp, 16			; 00000010H
  0038f	3b c5		 cmp	 eax, ebp
  00391	0f 85 46 01 00
	00		 jne	 $L3259

; 448  : 
; 449  :     if (err==ZIP_OK)
; 450  :         err = ziplocal_putValue(zi->filezip,(uLong)zi->ci.dosDate,4);

  00397	8b 86 64 40 00
	00		 mov	 eax, DWORD PTR [esi+16484]
  0039d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0039f	88 44 24 28	 mov	 BYTE PTR _buf$3044[esp+16], al
  003a3	c1 e8 08	 shr	 eax, 8
  003a6	51		 push	 ecx
  003a7	88 44 24 2d	 mov	 BYTE PTR _buf$3044[esp+21], al
  003ab	c1 e8 08	 shr	 eax, 8
  003ae	55		 push	 ebp
  003af	88 44 24 32	 mov	 BYTE PTR _buf$3044[esp+26], al
  003b3	8d 54 24 30	 lea	 edx, DWORD PTR _buf$3044[esp+24]
  003b7	c1 e8 08	 shr	 eax, 8
  003ba	6a 04		 push	 4
  003bc	52		 push	 edx
  003bd	88 44 24 3b	 mov	 BYTE PTR _buf$3044[esp+35], al
  003c1	e8 00 00 00 00	 call	 _fwrite
  003c6	83 c4 10	 add	 esp, 16			; 00000010H
  003c9	3b c5		 cmp	 eax, ebp
  003cb	0f 85 0c 01 00
	00		 jne	 $L3259

; 451  : 
; 452  :     if (err==ZIP_OK)
; 453  :         err = ziplocal_putValue(zi->filezip,(uLong)0,4); /* crc 32, unknown */

  003d1	8b 06		 mov	 eax, DWORD PTR [esi]
  003d3	50		 push	 eax
  003d4	55		 push	 ebp
  003d5	8d 44 24 30	 lea	 eax, DWORD PTR _buf$3057[esp+24]
  003d9	6a 04		 push	 4
  003db	50		 push	 eax
  003dc	88 5c 24 38	 mov	 BYTE PTR _buf$3057[esp+32], bl
  003e0	88 5c 24 39	 mov	 BYTE PTR _buf$3057[esp+33], bl
  003e4	88 5c 24 3a	 mov	 BYTE PTR _buf$3057[esp+34], bl
  003e8	88 5c 24 3b	 mov	 BYTE PTR _buf$3057[esp+35], bl
  003ec	e8 00 00 00 00	 call	 _fwrite
  003f1	83 c4 10	 add	 esp, 16			; 00000010H
  003f4	3b c5		 cmp	 eax, ebp
  003f6	0f 85 e1 00 00
	00		 jne	 $L3259

; 454  :     if (err==ZIP_OK)
; 455  :         err = ziplocal_putValue(zi->filezip,(uLong)0,4); /* compressed size, unknown */

  003fc	8b 06		 mov	 eax, DWORD PTR [esi]
  003fe	50		 push	 eax
  003ff	55		 push	 ebp
  00400	8d 4c 24 30	 lea	 ecx, DWORD PTR _buf$3070[esp+24]
  00404	6a 04		 push	 4
  00406	51		 push	 ecx
  00407	88 5c 24 38	 mov	 BYTE PTR _buf$3070[esp+32], bl
  0040b	88 5c 24 39	 mov	 BYTE PTR _buf$3070[esp+33], bl
  0040f	88 5c 24 3a	 mov	 BYTE PTR _buf$3070[esp+34], bl
  00413	88 5c 24 3b	 mov	 BYTE PTR _buf$3070[esp+35], bl
  00417	e8 00 00 00 00	 call	 _fwrite
  0041c	83 c4 10	 add	 esp, 16			; 00000010H
  0041f	3b c5		 cmp	 eax, ebp
  00421	0f 85 b6 00 00
	00		 jne	 $L3259

; 456  :     if (err==ZIP_OK)
; 457  :         err = ziplocal_putValue(zi->filezip,(uLong)0,4); /* uncompressed size, unknown */

  00427	8b 06		 mov	 eax, DWORD PTR [esi]
  00429	50		 push	 eax
  0042a	55		 push	 ebp
  0042b	8d 54 24 30	 lea	 edx, DWORD PTR _buf$3084[esp+24]
  0042f	6a 04		 push	 4
  00431	52		 push	 edx
  00432	88 5c 24 38	 mov	 BYTE PTR _buf$3084[esp+32], bl
  00436	88 5c 24 39	 mov	 BYTE PTR _buf$3084[esp+33], bl
  0043a	88 5c 24 3a	 mov	 BYTE PTR _buf$3084[esp+34], bl
  0043e	88 5c 24 3b	 mov	 BYTE PTR _buf$3084[esp+35], bl
  00442	e8 00 00 00 00	 call	 _fwrite
  00447	83 c4 10	 add	 esp, 16			; 00000010H
  0044a	3b c5		 cmp	 eax, ebp
  0044c	0f 85 8b 00 00
	00		 jne	 $L3259

; 458  : 
; 459  :     if (err==ZIP_OK)
; 460  :         err = ziplocal_putValue(zi->filezip,(uLong)size_filename,2);

  00452	8b 06		 mov	 eax, DWORD PTR [esi]
  00454	8a 4c 24 2c	 mov	 cl, BYTE PTR _size_filename$[esp+16]
  00458	8a 54 24 18	 mov	 dl, BYTE PTR tv2488[esp+16]
  0045c	50		 push	 eax
  0045d	55		 push	 ebp
  0045e	8d 44 24 30	 lea	 eax, DWORD PTR _buf$3097[esp+24]
  00462	6a 02		 push	 2
  00464	50		 push	 eax
  00465	88 4c 24 38	 mov	 BYTE PTR _buf$3097[esp+32], cl
  00469	88 54 24 39	 mov	 BYTE PTR _buf$3097[esp+33], dl
  0046d	e8 00 00 00 00	 call	 _fwrite
  00472	83 c4 10	 add	 esp, 16			; 00000010H
  00475	3b c5		 cmp	 eax, ebp
  00477	75 64		 jne	 SHORT $L3259

; 461  : 
; 462  :     if (err==ZIP_OK)
; 463  :         err = ziplocal_putValue(zi->filezip,(uLong)size_extrafield_local,2);

  00479	8b 06		 mov	 eax, DWORD PTR [esi]
  0047b	8b 4c 24 20	 mov	 ecx, DWORD PTR _size_extrafield_local$[esp+16]
  0047f	50		 push	 eax
  00480	88 4c 24 2c	 mov	 BYTE PTR _buf$3110[esp+20], cl
  00484	c1 e9 08	 shr	 ecx, 8
  00487	55		 push	 ebp
  00488	88 4c 24 31	 mov	 BYTE PTR _buf$3110[esp+25], cl
  0048c	8d 4c 24 30	 lea	 ecx, DWORD PTR _buf$3110[esp+24]
  00490	6a 02		 push	 2
  00492	51		 push	 ecx
  00493	e8 00 00 00 00	 call	 _fwrite
  00498	83 c4 10	 add	 esp, 16			; 00000010H
  0049b	3b c5		 cmp	 eax, ebp
  0049d	75 3e		 jne	 SHORT $L3259

; 464  : 
; 465  :     if ((err==ZIP_OK) && (size_filename>0))

  0049f	8b 44 24 2c	 mov	 eax, DWORD PTR _size_filename$[esp+16]
  004a3	33 ff		 xor	 edi, edi
  004a5	3b c3		 cmp	 eax, ebx
  004a7	76 16		 jbe	 SHORT $L3247

; 466  :         if (fwrite(filename,(uInt)size_filename,1,zi->filezip)!=1)

  004a9	8b 16		 mov	 edx, DWORD PTR [esi]
  004ab	52		 push	 edx
  004ac	55		 push	 ebp
  004ad	50		 push	 eax
  004ae	8b 44 24 1c	 mov	 eax, DWORD PTR _filename$[esp+32]
  004b2	50		 push	 eax
  004b3	e8 00 00 00 00	 call	 _fwrite
  004b8	83 c4 10	 add	 esp, 16			; 00000010H
  004bb	3b c5		 cmp	 eax, ebp

; 467  :                 err = ZIP_ERRNO;
; 468  : 
; 469  :     if ((err==ZIP_OK) && (size_extrafield_local>0))

  004bd	75 1e		 jne	 SHORT $L3259
$L3247:
  004bf	8b 44 24 20	 mov	 eax, DWORD PTR _size_extrafield_local$[esp+16]
  004c3	3b c3		 cmp	 eax, ebx
  004c5	76 19		 jbe	 SHORT $L2328

; 470  :         if (fwrite(extrafield_local,(uInt)size_extrafield_local,1,zi->filezip)
; 471  :                                                                            !=1)

  004c7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  004c9	8b 54 24 1c	 mov	 edx, DWORD PTR _extrafield_local$[esp+16]
  004cd	51		 push	 ecx
  004ce	55		 push	 ebp
  004cf	50		 push	 eax
  004d0	52		 push	 edx
  004d1	e8 00 00 00 00	 call	 _fwrite
  004d6	83 c4 10	 add	 esp, 16			; 00000010H
  004d9	3b c5		 cmp	 eax, ebp
  004db	74 03		 je	 SHORT $L2328
$L3259:

; 472  :                 err = ZIP_ERRNO;

  004dd	83 cf ff	 or	 edi, -1
$L2328:

; 473  : 
; 474  :     zi->ci.stream.avail_in = (uInt)0;
; 475  :     zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;
; 476  :     zi->ci.stream.next_out = zi->ci.buffered_data;
; 477  :     zi->ci.stream.total_in = 0;
; 478  :     zi->ci.stream.total_out = 0;
; 479  : 
; 480  :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED))

  004e0	3b fb		 cmp	 edi, ebx
  004e2	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  004e5	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  004e8	c7 46 20 00 40
	00 00		 mov	 DWORD PTR [esi+32], 16384 ; 00004000H
  004ef	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  004f2	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  004f5	89 5e 24	 mov	 DWORD PTR [esi+36], ebx
  004f8	75 35		 jne	 SHORT $L2338
  004fa	83 7e 60 08	 cmp	 DWORD PTR [esi+96], 8
  004fe	75 2c		 jne	 SHORT $L2337

; 481  :     {
; 482  :         zi->ci.stream.zalloc = (alloc_func)0;
; 483  :         zi->ci.stream.zfree = (free_func)0;
; 484  :         zi->ci.stream.opaque = (voidpf)0;
; 485  : 
; 486  :         err = deflateInit2(&zi->ci.stream, level,
; 487  :                Z_DEFLATED, -MAX_WBITS, DEF_MEM_LEVEL, 0);

  00500	8b 54 24 34	 mov	 edx, DWORD PTR _level$[esp+16]
  00504	6a 38		 push	 56			; 00000038H
  00506	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05DOIEBMOI@1?41?44?$AA@
  0050b	53		 push	 ebx
  0050c	6a 08		 push	 8
  0050e	6a f1		 push	 -15			; fffffff1H
  00510	6a 08		 push	 8
  00512	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00515	89 5e 30	 mov	 DWORD PTR [esi+48], ebx
  00518	89 5e 34	 mov	 DWORD PTR [esi+52], ebx
  0051b	89 5e 38	 mov	 DWORD PTR [esi+56], ebx
  0051e	e8 00 00 00 00	 call	 @deflateInit2_@32
  00523	8b f8		 mov	 edi, eax

; 488  : 
; 489  :         if (err==Z_OK)

  00525	3b fb		 cmp	 edi, ebx
  00527	75 06		 jne	 SHORT $L2338

; 490  :             zi->ci.stream_initialised = 1;

  00529	89 6e 48	 mov	 DWORD PTR [esi+72], ebp
$L2337:

; 491  :     }
; 492  : 
; 493  : 
; 494  :     if (err==Z_OK)
; 495  :         zi->in_opened_file_inzip = 1;

  0052c	89 6e 0c	 mov	 DWORD PTR [esi+12], ebp
$L2338:

; 496  :     return err;

  0052f	8b c7		 mov	 eax, edi
$L3256:
  00531	5d		 pop	 ebp
  00532	5f		 pop	 edi
  00533	5e		 pop	 esi
  00534	5b		 pop	 ebx

; 497  : }

  00535	59		 pop	 ecx
  00536	c2 20 00	 ret	 32			; 00000020H
@zipOpenNewFileInZip@40 ENDP
_TEXT	ENDS
END
