; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\compress.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_05DOIEBMOI@1?41?44?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT @compress2@20
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT @compress@16
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	@compress2@20
PUBLIC	??_C@_05DOIEBMOI@1?41?44?$AA@			; `string'
EXTRN	@deflate@8:NEAR
EXTRN	@deflateEnd@4:NEAR
EXTRN	@deflateInit_@16:NEAR
;	COMDAT ??_C@_05DOIEBMOI@1?41?44?$AA@
; File c:\documents and settings\weinerschnitzel\my documents\xbox\surreal64ce sf\trunk\b5.6\1964x11\xbox\zlib\compress.c
CONST	SEGMENT
??_C@_05DOIEBMOI@1?41?44?$AA@ DB '1.1.4', 00H		; `string'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT @compress2@20
_TEXT	SEGMENT
_stream$ = -56						; size = 56
_source$ = 8						; size = 4
_sourceLen$ = 12					; size = 4
_level$ = 16						; size = 4
@compress2@20 PROC NEAR					; COMDAT
; _dest$ = ecx
; _destLen$ = edx

; 27   : {

  00000	83 ec 38	 sub	 esp, 56			; 00000038H

; 28   :     z_stream stream;
; 29   :     int err;
; 30   : 
; 31   :     stream.next_in = (Bytef*)source;

  00003	8b 44 24 3c	 mov	 eax, DWORD PTR _source$[esp+52]
  00007	56		 push	 esi
  00008	8b f2		 mov	 esi, edx

; 32   :     stream.avail_in = (uInt)sourceLen;

  0000a	8b 54 24 44	 mov	 edx, DWORD PTR _sourceLen$[esp+56]
  0000e	89 44 24 04	 mov	 DWORD PTR _stream$[esp+60], eax

; 33   : #ifdef MAXSEG_64K
; 34   :     /* Check for source > 64K on 16-bit machine: */
; 35   :     if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
; 36   : #endif
; 37   :     stream.next_out = dest;
; 38   :     stream.avail_out = (uInt)*destLen;

  00012	8b 06		 mov	 eax, DWORD PTR [esi]

; 39   :     if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;
; 40   : 
; 41   :     stream.zalloc = (alloc_func)0;
; 42   :     stream.zfree = (free_func)0;
; 43   :     stream.opaque = (voidpf)0;
; 44   : 
; 45   :     err = deflateInit(&stream, level);

  00014	6a 38		 push	 56			; 00000038H
  00016	89 54 24 0c	 mov	 DWORD PTR _stream$[esp+68], edx
  0001a	8b 54 24 4c	 mov	 edx, DWORD PTR _level$[esp+60]
  0001e	89 4c 24 14	 mov	 DWORD PTR _stream$[esp+76], ecx
  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_05DOIEBMOI@1?41?44?$AA@
  00027	8d 4c 24 0c	 lea	 ecx, DWORD PTR _stream$[esp+68]
  0002b	89 44 24 1c	 mov	 DWORD PTR _stream$[esp+84], eax
  0002f	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _stream$[esp+100], 0
  00037	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR _stream$[esp+104], 0
  0003f	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR _stream$[esp+108], 0
  00047	e8 00 00 00 00	 call	 @deflateInit_@16

; 46   :     if (err != Z_OK) return err;

  0004c	85 c0		 test	 eax, eax
  0004e	75 42		 jne	 SHORT $L867
  00050	57		 push	 edi

; 47   : 
; 48   :     err = deflate(&stream, Z_FINISH);

  00051	ba 04 00 00 00	 mov	 edx, 4
  00056	8d 4c 24 08	 lea	 ecx, DWORD PTR _stream$[esp+64]
  0005a	e8 00 00 00 00	 call	 @deflate@8
  0005f	8b f8		 mov	 edi, eax

; 49   :     if (err != Z_STREAM_END) {

  00061	83 ff 01	 cmp	 edi, 1
  00064	74 1c		 je	 SHORT $L881

; 50   :         deflateEnd(&stream);

  00066	8d 4c 24 08	 lea	 ecx, DWORD PTR _stream$[esp+64]
  0006a	e8 00 00 00 00	 call	 @deflateEnd@4

; 51   :         return err == Z_OK ? Z_BUF_ERROR : err;

  0006f	85 ff		 test	 edi, edi
  00071	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00076	74 19		 je	 SHORT $L901
  00078	8b c7		 mov	 eax, edi
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi

; 56   :     return err;
; 57   : }

  0007c	83 c4 38	 add	 esp, 56			; 00000038H
  0007f	c2 0c 00	 ret	 12			; 0000000cH
$L881:

; 52   :     }
; 53   :     *destLen = stream.total_out;

  00082	8b 4c 24 1c	 mov	 ecx, DWORD PTR _stream$[esp+84]
  00086	89 0e		 mov	 DWORD PTR [esi], ecx

; 54   : 
; 55   :     err = deflateEnd(&stream);

  00088	8d 4c 24 08	 lea	 ecx, DWORD PTR _stream$[esp+64]
  0008c	e8 00 00 00 00	 call	 @deflateEnd@4
$L901:
  00091	5f		 pop	 edi
$L867:
  00092	5e		 pop	 esi

; 56   :     return err;
; 57   : }

  00093	83 c4 38	 add	 esp, 56			; 00000038H
  00096	c2 0c 00	 ret	 12			; 0000000cH
@compress2@20 ENDP
_TEXT	ENDS
PUBLIC	@compress@16
; Function compile flags: /Ogty
;	COMDAT @compress@16
_TEXT	SEGMENT
_source$ = 8						; size = 4
_sourceLen$ = 12					; size = 4
@compress@16 PROC NEAR					; COMDAT
; _dest$ = ecx
; _destLen$ = edx

; 67   :     return compress2(dest, destLen, source, sourceLen, Z_DEFAULT_COMPRESSION);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _sourceLen$[esp-4]
  00004	6a ff		 push	 -1
  00006	50		 push	 eax
  00007	8b 44 24 0c	 mov	 eax, DWORD PTR _source$[esp+4]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 @compress2@20

; 68   : }

  00011	c2 08 00	 ret	 8
@compress@16 ENDP
_TEXT	ENDS
END
